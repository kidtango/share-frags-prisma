
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string | null
  username: string | null
  firstName: string | null
  lastName: string | null
  avatar: string | null
  title: string | null
  createdAt: Date
  updatedAt: Date | null
}

/**
 * Model Livestock
 * 
 */
export type Livestock = {
  id: number
  name: string
  price: number
  discountedPrice: number
  quantity: number
  createdAt: Date
  updatedAt: Date
  shopId: number | null
}

/**
 * Model LivestockWishlist
 * 
 */
export type LivestockWishlist = {
  userId: string
  livestockId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Address
 * 
 */
export type Address = {
  id: number
  street: string
  city: string
  state: string
  zip: number
  isPrimary: boolean
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Image
 * 
 */
export type Image = {
  id: number
  url: string
  createdAt: Date
  updatedAt: Date
  livestockId: number | null
}

/**
 * Model ShopReview
 * 
 */
export type ShopReview = {
  text: string
  rating: number
  shopId: number
  userId: string
}

/**
 * Model ShopLike
 * 
 */
export type ShopLike = {
  userId: string
  shopId: number
}

/**
 * Model Shop
 * 
 */
export type Shop = {
  id: number
  userId: string
  name: string
  rating: number
  addressId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.livestock`: Exposes CRUD operations for the **Livestock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Livestocks
    * const livestocks = await prisma.livestock.findMany()
    * ```
    */
  get livestock(): Prisma.LivestockDelegate<GlobalReject>;

  /**
   * `prisma.livestockWishlist`: Exposes CRUD operations for the **LivestockWishlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LivestockWishlists
    * const livestockWishlists = await prisma.livestockWishlist.findMany()
    * ```
    */
  get livestockWishlist(): Prisma.LivestockWishlistDelegate<GlobalReject>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<GlobalReject>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<GlobalReject>;

  /**
   * `prisma.shopReview`: Exposes CRUD operations for the **ShopReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShopReviews
    * const shopReviews = await prisma.shopReview.findMany()
    * ```
    */
  get shopReview(): Prisma.ShopReviewDelegate<GlobalReject>;

  /**
   * `prisma.shopLike`: Exposes CRUD operations for the **ShopLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShopLikes
    * const shopLikes = await prisma.shopLike.findMany()
    * ```
    */
  get shopLike(): Prisma.ShopLikeDelegate<GlobalReject>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Livestock: 'Livestock',
    LivestockWishlist: 'LivestockWishlist',
    Address: 'Address',
    Image: 'Image',
    ShopReview: 'ShopReview',
    ShopLike: 'ShopLike',
    Shop: 'Shop'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    review: number
    shopLikes: number
    wishlist: number
  }

  export type UserCountOutputTypeSelect = {
    review?: boolean
    shopLikes?: boolean
    wishlist?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type LivestockCountOutputType
   */


  export type LivestockCountOutputType = {
    images: number
    LivestockWishlist: number
  }

  export type LivestockCountOutputTypeSelect = {
    images?: boolean
    LivestockWishlist?: boolean
  }

  export type LivestockCountOutputTypeGetPayload<
    S extends boolean | null | undefined | LivestockCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? LivestockCountOutputType
    : S extends undefined
    ? never
    : S extends LivestockCountOutputTypeArgs
    ?'include' extends U
    ? LivestockCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LivestockCountOutputType ? LivestockCountOutputType[P] : never
  } 
    : LivestockCountOutputType
  : LivestockCountOutputType




  // Custom InputTypes

  /**
   * LivestockCountOutputType without action
   */
  export type LivestockCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LivestockCountOutputType
     * 
    **/
    select?: LivestockCountOutputTypeSelect | null
  }



  /**
   * Count Type ShopCountOutputType
   */


  export type ShopCountOutputType = {
    livestockForSale: number
    reviews: number
    shopLikes: number
  }

  export type ShopCountOutputTypeSelect = {
    livestockForSale?: boolean
    reviews?: boolean
    shopLikes?: boolean
  }

  export type ShopCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ShopCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ShopCountOutputType
    : S extends undefined
    ? never
    : S extends ShopCountOutputTypeArgs
    ?'include' extends U
    ? ShopCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ShopCountOutputType ? ShopCountOutputType[P] : never
  } 
    : ShopCountOutputType
  : ShopCountOutputType




  // Custom InputTypes

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     * 
    **/
    select?: ShopCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    firstName: number
    lastName: number
    avatar: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    avatar?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    avatar?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    avatar?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    title: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    title?: boolean
    address?: boolean | AddressArgs
    createdAt?: boolean
    updatedAt?: boolean
    shop?: boolean | ShopArgs
    review?: boolean | ShopReviewFindManyArgs
    shopLikes?: boolean | ShopLikeFindManyArgs
    wishlist?: boolean | LivestockWishlistFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    address?: boolean | AddressArgs
    shop?: boolean | ShopArgs
    review?: boolean | ShopReviewFindManyArgs
    shopLikes?: boolean | ShopLikeFindManyArgs
    wishlist?: boolean | LivestockWishlistFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'address' ? AddressGetPayload<S['include'][P]> | null :
        P extends 'shop' ? ShopGetPayload<S['include'][P]> | null :
        P extends 'review' ? Array < ShopReviewGetPayload<S['include'][P]>>  :
        P extends 'shopLikes' ? Array < ShopLikeGetPayload<S['include'][P]>>  :
        P extends 'wishlist' ? Array < LivestockWishlistGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'address' ? AddressGetPayload<S['select'][P]> | null :
        P extends 'shop' ? ShopGetPayload<S['select'][P]> | null :
        P extends 'review' ? Array < ShopReviewGetPayload<S['select'][P]>>  :
        P extends 'shopLikes' ? Array < ShopLikeGetPayload<S['select'][P]>>  :
        P extends 'wishlist' ? Array < LivestockWishlistGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends AddressArgs = {}>(args?: Subset<T, AddressArgs>): CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>;

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    review<T extends ShopReviewFindManyArgs = {}>(args?: Subset<T, ShopReviewFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShopReview>>, PrismaPromise<Array<ShopReviewGetPayload<T>>>>;

    shopLikes<T extends ShopLikeFindManyArgs = {}>(args?: Subset<T, ShopLikeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShopLike>>, PrismaPromise<Array<ShopLikeGetPayload<T>>>>;

    wishlist<T extends LivestockWishlistFindManyArgs = {}>(args?: Subset<T, LivestockWishlistFindManyArgs>): CheckSelect<T, PrismaPromise<Array<LivestockWishlist>>, PrismaPromise<Array<LivestockWishlistGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Livestock
   */


  export type AggregateLivestock = {
    _count: LivestockCountAggregateOutputType | null
    _avg: LivestockAvgAggregateOutputType | null
    _sum: LivestockSumAggregateOutputType | null
    _min: LivestockMinAggregateOutputType | null
    _max: LivestockMaxAggregateOutputType | null
  }

  export type LivestockAvgAggregateOutputType = {
    id: number | null
    price: number | null
    discountedPrice: number | null
    quantity: number | null
    shopId: number | null
  }

  export type LivestockSumAggregateOutputType = {
    id: number | null
    price: number | null
    discountedPrice: number | null
    quantity: number | null
    shopId: number | null
  }

  export type LivestockMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    discountedPrice: number | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    shopId: number | null
  }

  export type LivestockMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    discountedPrice: number | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    shopId: number | null
  }

  export type LivestockCountAggregateOutputType = {
    id: number
    name: number
    price: number
    discountedPrice: number
    quantity: number
    createdAt: number
    updatedAt: number
    shopId: number
    _all: number
  }


  export type LivestockAvgAggregateInputType = {
    id?: true
    price?: true
    discountedPrice?: true
    quantity?: true
    shopId?: true
  }

  export type LivestockSumAggregateInputType = {
    id?: true
    price?: true
    discountedPrice?: true
    quantity?: true
    shopId?: true
  }

  export type LivestockMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    discountedPrice?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    shopId?: true
  }

  export type LivestockMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    discountedPrice?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    shopId?: true
  }

  export type LivestockCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    discountedPrice?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    shopId?: true
    _all?: true
  }

  export type LivestockAggregateArgs = {
    /**
     * Filter which Livestock to aggregate.
     * 
    **/
    where?: LivestockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Livestocks to fetch.
     * 
    **/
    orderBy?: Enumerable<LivestockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LivestockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Livestocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Livestocks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Livestocks
    **/
    _count?: true | LivestockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LivestockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LivestockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LivestockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LivestockMaxAggregateInputType
  }

  export type GetLivestockAggregateType<T extends LivestockAggregateArgs> = {
        [P in keyof T & keyof AggregateLivestock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLivestock[P]>
      : GetScalarType<T[P], AggregateLivestock[P]>
  }




  export type LivestockGroupByArgs = {
    where?: LivestockWhereInput
    orderBy?: Enumerable<LivestockOrderByWithAggregationInput>
    by: Array<LivestockScalarFieldEnum>
    having?: LivestockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LivestockCountAggregateInputType | true
    _avg?: LivestockAvgAggregateInputType
    _sum?: LivestockSumAggregateInputType
    _min?: LivestockMinAggregateInputType
    _max?: LivestockMaxAggregateInputType
  }


  export type LivestockGroupByOutputType = {
    id: number
    name: string
    price: number
    discountedPrice: number
    quantity: number
    createdAt: Date
    updatedAt: Date
    shopId: number | null
    _count: LivestockCountAggregateOutputType | null
    _avg: LivestockAvgAggregateOutputType | null
    _sum: LivestockSumAggregateOutputType | null
    _min: LivestockMinAggregateOutputType | null
    _max: LivestockMaxAggregateOutputType | null
  }

  type GetLivestockGroupByPayload<T extends LivestockGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LivestockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LivestockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LivestockGroupByOutputType[P]>
            : GetScalarType<T[P], LivestockGroupByOutputType[P]>
        }
      >
    >


  export type LivestockSelect = {
    id?: boolean
    name?: boolean
    images?: boolean | ImageFindManyArgs
    price?: boolean
    discountedPrice?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shop?: boolean | ShopArgs
    shopId?: boolean
    LivestockWishlist?: boolean | LivestockWishlistFindManyArgs
    _count?: boolean | LivestockCountOutputTypeArgs
  }

  export type LivestockInclude = {
    images?: boolean | ImageFindManyArgs
    shop?: boolean | ShopArgs
    LivestockWishlist?: boolean | LivestockWishlistFindManyArgs
    _count?: boolean | LivestockCountOutputTypeArgs
  }

  export type LivestockGetPayload<
    S extends boolean | null | undefined | LivestockArgs,
    U = keyof S
      > = S extends true
        ? Livestock
    : S extends undefined
    ? never
    : S extends LivestockArgs | LivestockFindManyArgs
    ?'include' extends U
    ? Livestock  & {
    [P in TrueKeys<S['include']>]:
        P extends 'images' ? Array < ImageGetPayload<S['include'][P]>>  :
        P extends 'shop' ? ShopGetPayload<S['include'][P]> | null :
        P extends 'LivestockWishlist' ? Array < LivestockWishlistGetPayload<S['include'][P]>>  :
        P extends '_count' ? LivestockCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'images' ? Array < ImageGetPayload<S['select'][P]>>  :
        P extends 'shop' ? ShopGetPayload<S['select'][P]> | null :
        P extends 'LivestockWishlist' ? Array < LivestockWishlistGetPayload<S['select'][P]>>  :
        P extends '_count' ? LivestockCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Livestock ? Livestock[P] : never
  } 
    : Livestock
  : Livestock


  type LivestockCountArgs = Merge<
    Omit<LivestockFindManyArgs, 'select' | 'include'> & {
      select?: LivestockCountAggregateInputType | true
    }
  >

  export interface LivestockDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Livestock that matches the filter.
     * @param {LivestockFindUniqueArgs} args - Arguments to find a Livestock
     * @example
     * // Get one Livestock
     * const livestock = await prisma.livestock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LivestockFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LivestockFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Livestock'> extends True ? CheckSelect<T, Prisma__LivestockClient<Livestock>, Prisma__LivestockClient<LivestockGetPayload<T>>> : CheckSelect<T, Prisma__LivestockClient<Livestock | null >, Prisma__LivestockClient<LivestockGetPayload<T> | null >>

    /**
     * Find the first Livestock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockFindFirstArgs} args - Arguments to find a Livestock
     * @example
     * // Get one Livestock
     * const livestock = await prisma.livestock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LivestockFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LivestockFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Livestock'> extends True ? CheckSelect<T, Prisma__LivestockClient<Livestock>, Prisma__LivestockClient<LivestockGetPayload<T>>> : CheckSelect<T, Prisma__LivestockClient<Livestock | null >, Prisma__LivestockClient<LivestockGetPayload<T> | null >>

    /**
     * Find zero or more Livestocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Livestocks
     * const livestocks = await prisma.livestock.findMany()
     * 
     * // Get first 10 Livestocks
     * const livestocks = await prisma.livestock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const livestockWithIdOnly = await prisma.livestock.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LivestockFindManyArgs>(
      args?: SelectSubset<T, LivestockFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Livestock>>, PrismaPromise<Array<LivestockGetPayload<T>>>>

    /**
     * Create a Livestock.
     * @param {LivestockCreateArgs} args - Arguments to create a Livestock.
     * @example
     * // Create one Livestock
     * const Livestock = await prisma.livestock.create({
     *   data: {
     *     // ... data to create a Livestock
     *   }
     * })
     * 
    **/
    create<T extends LivestockCreateArgs>(
      args: SelectSubset<T, LivestockCreateArgs>
    ): CheckSelect<T, Prisma__LivestockClient<Livestock>, Prisma__LivestockClient<LivestockGetPayload<T>>>

    /**
     * Create many Livestocks.
     *     @param {LivestockCreateManyArgs} args - Arguments to create many Livestocks.
     *     @example
     *     // Create many Livestocks
     *     const livestock = await prisma.livestock.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LivestockCreateManyArgs>(
      args?: SelectSubset<T, LivestockCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Livestock.
     * @param {LivestockDeleteArgs} args - Arguments to delete one Livestock.
     * @example
     * // Delete one Livestock
     * const Livestock = await prisma.livestock.delete({
     *   where: {
     *     // ... filter to delete one Livestock
     *   }
     * })
     * 
    **/
    delete<T extends LivestockDeleteArgs>(
      args: SelectSubset<T, LivestockDeleteArgs>
    ): CheckSelect<T, Prisma__LivestockClient<Livestock>, Prisma__LivestockClient<LivestockGetPayload<T>>>

    /**
     * Update one Livestock.
     * @param {LivestockUpdateArgs} args - Arguments to update one Livestock.
     * @example
     * // Update one Livestock
     * const livestock = await prisma.livestock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LivestockUpdateArgs>(
      args: SelectSubset<T, LivestockUpdateArgs>
    ): CheckSelect<T, Prisma__LivestockClient<Livestock>, Prisma__LivestockClient<LivestockGetPayload<T>>>

    /**
     * Delete zero or more Livestocks.
     * @param {LivestockDeleteManyArgs} args - Arguments to filter Livestocks to delete.
     * @example
     * // Delete a few Livestocks
     * const { count } = await prisma.livestock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LivestockDeleteManyArgs>(
      args?: SelectSubset<T, LivestockDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Livestocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Livestocks
     * const livestock = await prisma.livestock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LivestockUpdateManyArgs>(
      args: SelectSubset<T, LivestockUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Livestock.
     * @param {LivestockUpsertArgs} args - Arguments to update or create a Livestock.
     * @example
     * // Update or create a Livestock
     * const livestock = await prisma.livestock.upsert({
     *   create: {
     *     // ... data to create a Livestock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Livestock we want to update
     *   }
     * })
    **/
    upsert<T extends LivestockUpsertArgs>(
      args: SelectSubset<T, LivestockUpsertArgs>
    ): CheckSelect<T, Prisma__LivestockClient<Livestock>, Prisma__LivestockClient<LivestockGetPayload<T>>>

    /**
     * Count the number of Livestocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockCountArgs} args - Arguments to filter Livestocks to count.
     * @example
     * // Count the number of Livestocks
     * const count = await prisma.livestock.count({
     *   where: {
     *     // ... the filter for the Livestocks we want to count
     *   }
     * })
    **/
    count<T extends LivestockCountArgs>(
      args?: Subset<T, LivestockCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LivestockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Livestock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LivestockAggregateArgs>(args: Subset<T, LivestockAggregateArgs>): PrismaPromise<GetLivestockAggregateType<T>>

    /**
     * Group by Livestock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LivestockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LivestockGroupByArgs['orderBy'] }
        : { orderBy?: LivestockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LivestockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLivestockGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Livestock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LivestockClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    images<T extends ImageFindManyArgs = {}>(args?: Subset<T, ImageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>;

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    LivestockWishlist<T extends LivestockWishlistFindManyArgs = {}>(args?: Subset<T, LivestockWishlistFindManyArgs>): CheckSelect<T, PrismaPromise<Array<LivestockWishlist>>, PrismaPromise<Array<LivestockWishlistGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Livestock findUnique
   */
  export type LivestockFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * Throw an Error if a Livestock can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Livestock to fetch.
     * 
    **/
    where: LivestockWhereUniqueInput
  }


  /**
   * Livestock findFirst
   */
  export type LivestockFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * Throw an Error if a Livestock can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Livestock to fetch.
     * 
    **/
    where?: LivestockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Livestocks to fetch.
     * 
    **/
    orderBy?: Enumerable<LivestockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Livestocks.
     * 
    **/
    cursor?: LivestockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Livestocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Livestocks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Livestocks.
     * 
    **/
    distinct?: Enumerable<LivestockScalarFieldEnum>
  }


  /**
   * Livestock findMany
   */
  export type LivestockFindManyArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * Filter, which Livestocks to fetch.
     * 
    **/
    where?: LivestockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Livestocks to fetch.
     * 
    **/
    orderBy?: Enumerable<LivestockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Livestocks.
     * 
    **/
    cursor?: LivestockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Livestocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Livestocks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LivestockScalarFieldEnum>
  }


  /**
   * Livestock create
   */
  export type LivestockCreateArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * The data needed to create a Livestock.
     * 
    **/
    data: XOR<LivestockCreateInput, LivestockUncheckedCreateInput>
  }


  /**
   * Livestock createMany
   */
  export type LivestockCreateManyArgs = {
    /**
     * The data used to create many Livestocks.
     * 
    **/
    data: Enumerable<LivestockCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Livestock update
   */
  export type LivestockUpdateArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * The data needed to update a Livestock.
     * 
    **/
    data: XOR<LivestockUpdateInput, LivestockUncheckedUpdateInput>
    /**
     * Choose, which Livestock to update.
     * 
    **/
    where: LivestockWhereUniqueInput
  }


  /**
   * Livestock updateMany
   */
  export type LivestockUpdateManyArgs = {
    /**
     * The data used to update Livestocks.
     * 
    **/
    data: XOR<LivestockUpdateManyMutationInput, LivestockUncheckedUpdateManyInput>
    /**
     * Filter which Livestocks to update
     * 
    **/
    where?: LivestockWhereInput
  }


  /**
   * Livestock upsert
   */
  export type LivestockUpsertArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * The filter to search for the Livestock to update in case it exists.
     * 
    **/
    where: LivestockWhereUniqueInput
    /**
     * In case the Livestock found by the `where` argument doesn't exist, create a new Livestock with this data.
     * 
    **/
    create: XOR<LivestockCreateInput, LivestockUncheckedCreateInput>
    /**
     * In case the Livestock was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LivestockUpdateInput, LivestockUncheckedUpdateInput>
  }


  /**
   * Livestock delete
   */
  export type LivestockDeleteArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
    /**
     * Filter which Livestock to delete.
     * 
    **/
    where: LivestockWhereUniqueInput
  }


  /**
   * Livestock deleteMany
   */
  export type LivestockDeleteManyArgs = {
    /**
     * Filter which Livestocks to delete
     * 
    **/
    where?: LivestockWhereInput
  }


  /**
   * Livestock without action
   */
  export type LivestockArgs = {
    /**
     * Select specific fields to fetch from the Livestock
     * 
    **/
    select?: LivestockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockInclude | null
  }



  /**
   * Model LivestockWishlist
   */


  export type AggregateLivestockWishlist = {
    _count: LivestockWishlistCountAggregateOutputType | null
    _avg: LivestockWishlistAvgAggregateOutputType | null
    _sum: LivestockWishlistSumAggregateOutputType | null
    _min: LivestockWishlistMinAggregateOutputType | null
    _max: LivestockWishlistMaxAggregateOutputType | null
  }

  export type LivestockWishlistAvgAggregateOutputType = {
    livestockId: number | null
  }

  export type LivestockWishlistSumAggregateOutputType = {
    livestockId: number | null
  }

  export type LivestockWishlistMinAggregateOutputType = {
    userId: string | null
    livestockId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LivestockWishlistMaxAggregateOutputType = {
    userId: string | null
    livestockId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LivestockWishlistCountAggregateOutputType = {
    userId: number
    livestockId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LivestockWishlistAvgAggregateInputType = {
    livestockId?: true
  }

  export type LivestockWishlistSumAggregateInputType = {
    livestockId?: true
  }

  export type LivestockWishlistMinAggregateInputType = {
    userId?: true
    livestockId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LivestockWishlistMaxAggregateInputType = {
    userId?: true
    livestockId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LivestockWishlistCountAggregateInputType = {
    userId?: true
    livestockId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LivestockWishlistAggregateArgs = {
    /**
     * Filter which LivestockWishlist to aggregate.
     * 
    **/
    where?: LivestockWishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LivestockWishlists to fetch.
     * 
    **/
    orderBy?: Enumerable<LivestockWishlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LivestockWishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LivestockWishlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LivestockWishlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LivestockWishlists
    **/
    _count?: true | LivestockWishlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LivestockWishlistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LivestockWishlistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LivestockWishlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LivestockWishlistMaxAggregateInputType
  }

  export type GetLivestockWishlistAggregateType<T extends LivestockWishlistAggregateArgs> = {
        [P in keyof T & keyof AggregateLivestockWishlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLivestockWishlist[P]>
      : GetScalarType<T[P], AggregateLivestockWishlist[P]>
  }




  export type LivestockWishlistGroupByArgs = {
    where?: LivestockWishlistWhereInput
    orderBy?: Enumerable<LivestockWishlistOrderByWithAggregationInput>
    by: Array<LivestockWishlistScalarFieldEnum>
    having?: LivestockWishlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LivestockWishlistCountAggregateInputType | true
    _avg?: LivestockWishlistAvgAggregateInputType
    _sum?: LivestockWishlistSumAggregateInputType
    _min?: LivestockWishlistMinAggregateInputType
    _max?: LivestockWishlistMaxAggregateInputType
  }


  export type LivestockWishlistGroupByOutputType = {
    userId: string
    livestockId: number
    createdAt: Date
    updatedAt: Date
    _count: LivestockWishlistCountAggregateOutputType | null
    _avg: LivestockWishlistAvgAggregateOutputType | null
    _sum: LivestockWishlistSumAggregateOutputType | null
    _min: LivestockWishlistMinAggregateOutputType | null
    _max: LivestockWishlistMaxAggregateOutputType | null
  }

  type GetLivestockWishlistGroupByPayload<T extends LivestockWishlistGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LivestockWishlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LivestockWishlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LivestockWishlistGroupByOutputType[P]>
            : GetScalarType<T[P], LivestockWishlistGroupByOutputType[P]>
        }
      >
    >


  export type LivestockWishlistSelect = {
    owner?: boolean | UserArgs
    userId?: boolean
    livestock?: boolean | LivestockArgs
    livestockId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LivestockWishlistInclude = {
    owner?: boolean | UserArgs
    livestock?: boolean | LivestockArgs
  }

  export type LivestockWishlistGetPayload<
    S extends boolean | null | undefined | LivestockWishlistArgs,
    U = keyof S
      > = S extends true
        ? LivestockWishlist
    : S extends undefined
    ? never
    : S extends LivestockWishlistArgs | LivestockWishlistFindManyArgs
    ?'include' extends U
    ? LivestockWishlist  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'livestock' ? LivestockGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'livestock' ? LivestockGetPayload<S['select'][P]> :  P extends keyof LivestockWishlist ? LivestockWishlist[P] : never
  } 
    : LivestockWishlist
  : LivestockWishlist


  type LivestockWishlistCountArgs = Merge<
    Omit<LivestockWishlistFindManyArgs, 'select' | 'include'> & {
      select?: LivestockWishlistCountAggregateInputType | true
    }
  >

  export interface LivestockWishlistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one LivestockWishlist that matches the filter.
     * @param {LivestockWishlistFindUniqueArgs} args - Arguments to find a LivestockWishlist
     * @example
     * // Get one LivestockWishlist
     * const livestockWishlist = await prisma.livestockWishlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LivestockWishlistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LivestockWishlistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LivestockWishlist'> extends True ? CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist>, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T>>> : CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist | null >, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T> | null >>

    /**
     * Find the first LivestockWishlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockWishlistFindFirstArgs} args - Arguments to find a LivestockWishlist
     * @example
     * // Get one LivestockWishlist
     * const livestockWishlist = await prisma.livestockWishlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LivestockWishlistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LivestockWishlistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LivestockWishlist'> extends True ? CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist>, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T>>> : CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist | null >, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T> | null >>

    /**
     * Find zero or more LivestockWishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockWishlistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LivestockWishlists
     * const livestockWishlists = await prisma.livestockWishlist.findMany()
     * 
     * // Get first 10 LivestockWishlists
     * const livestockWishlists = await prisma.livestockWishlist.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const livestockWishlistWithUserIdOnly = await prisma.livestockWishlist.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends LivestockWishlistFindManyArgs>(
      args?: SelectSubset<T, LivestockWishlistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<LivestockWishlist>>, PrismaPromise<Array<LivestockWishlistGetPayload<T>>>>

    /**
     * Create a LivestockWishlist.
     * @param {LivestockWishlistCreateArgs} args - Arguments to create a LivestockWishlist.
     * @example
     * // Create one LivestockWishlist
     * const LivestockWishlist = await prisma.livestockWishlist.create({
     *   data: {
     *     // ... data to create a LivestockWishlist
     *   }
     * })
     * 
    **/
    create<T extends LivestockWishlistCreateArgs>(
      args: SelectSubset<T, LivestockWishlistCreateArgs>
    ): CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist>, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T>>>

    /**
     * Create many LivestockWishlists.
     *     @param {LivestockWishlistCreateManyArgs} args - Arguments to create many LivestockWishlists.
     *     @example
     *     // Create many LivestockWishlists
     *     const livestockWishlist = await prisma.livestockWishlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LivestockWishlistCreateManyArgs>(
      args?: SelectSubset<T, LivestockWishlistCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LivestockWishlist.
     * @param {LivestockWishlistDeleteArgs} args - Arguments to delete one LivestockWishlist.
     * @example
     * // Delete one LivestockWishlist
     * const LivestockWishlist = await prisma.livestockWishlist.delete({
     *   where: {
     *     // ... filter to delete one LivestockWishlist
     *   }
     * })
     * 
    **/
    delete<T extends LivestockWishlistDeleteArgs>(
      args: SelectSubset<T, LivestockWishlistDeleteArgs>
    ): CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist>, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T>>>

    /**
     * Update one LivestockWishlist.
     * @param {LivestockWishlistUpdateArgs} args - Arguments to update one LivestockWishlist.
     * @example
     * // Update one LivestockWishlist
     * const livestockWishlist = await prisma.livestockWishlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LivestockWishlistUpdateArgs>(
      args: SelectSubset<T, LivestockWishlistUpdateArgs>
    ): CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist>, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T>>>

    /**
     * Delete zero or more LivestockWishlists.
     * @param {LivestockWishlistDeleteManyArgs} args - Arguments to filter LivestockWishlists to delete.
     * @example
     * // Delete a few LivestockWishlists
     * const { count } = await prisma.livestockWishlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LivestockWishlistDeleteManyArgs>(
      args?: SelectSubset<T, LivestockWishlistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LivestockWishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockWishlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LivestockWishlists
     * const livestockWishlist = await prisma.livestockWishlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LivestockWishlistUpdateManyArgs>(
      args: SelectSubset<T, LivestockWishlistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LivestockWishlist.
     * @param {LivestockWishlistUpsertArgs} args - Arguments to update or create a LivestockWishlist.
     * @example
     * // Update or create a LivestockWishlist
     * const livestockWishlist = await prisma.livestockWishlist.upsert({
     *   create: {
     *     // ... data to create a LivestockWishlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LivestockWishlist we want to update
     *   }
     * })
    **/
    upsert<T extends LivestockWishlistUpsertArgs>(
      args: SelectSubset<T, LivestockWishlistUpsertArgs>
    ): CheckSelect<T, Prisma__LivestockWishlistClient<LivestockWishlist>, Prisma__LivestockWishlistClient<LivestockWishlistGetPayload<T>>>

    /**
     * Count the number of LivestockWishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockWishlistCountArgs} args - Arguments to filter LivestockWishlists to count.
     * @example
     * // Count the number of LivestockWishlists
     * const count = await prisma.livestockWishlist.count({
     *   where: {
     *     // ... the filter for the LivestockWishlists we want to count
     *   }
     * })
    **/
    count<T extends LivestockWishlistCountArgs>(
      args?: Subset<T, LivestockWishlistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LivestockWishlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LivestockWishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockWishlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LivestockWishlistAggregateArgs>(args: Subset<T, LivestockWishlistAggregateArgs>): PrismaPromise<GetLivestockWishlistAggregateType<T>>

    /**
     * Group by LivestockWishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivestockWishlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LivestockWishlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LivestockWishlistGroupByArgs['orderBy'] }
        : { orderBy?: LivestockWishlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LivestockWishlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLivestockWishlistGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for LivestockWishlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LivestockWishlistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    livestock<T extends LivestockArgs = {}>(args?: Subset<T, LivestockArgs>): CheckSelect<T, Prisma__LivestockClient<Livestock | null >, Prisma__LivestockClient<LivestockGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * LivestockWishlist findUnique
   */
  export type LivestockWishlistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * Throw an Error if a LivestockWishlist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which LivestockWishlist to fetch.
     * 
    **/
    where: LivestockWishlistWhereUniqueInput
  }


  /**
   * LivestockWishlist findFirst
   */
  export type LivestockWishlistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * Throw an Error if a LivestockWishlist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which LivestockWishlist to fetch.
     * 
    **/
    where?: LivestockWishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LivestockWishlists to fetch.
     * 
    **/
    orderBy?: Enumerable<LivestockWishlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LivestockWishlists.
     * 
    **/
    cursor?: LivestockWishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LivestockWishlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LivestockWishlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LivestockWishlists.
     * 
    **/
    distinct?: Enumerable<LivestockWishlistScalarFieldEnum>
  }


  /**
   * LivestockWishlist findMany
   */
  export type LivestockWishlistFindManyArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * Filter, which LivestockWishlists to fetch.
     * 
    **/
    where?: LivestockWishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LivestockWishlists to fetch.
     * 
    **/
    orderBy?: Enumerable<LivestockWishlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LivestockWishlists.
     * 
    **/
    cursor?: LivestockWishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LivestockWishlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LivestockWishlists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LivestockWishlistScalarFieldEnum>
  }


  /**
   * LivestockWishlist create
   */
  export type LivestockWishlistCreateArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * The data needed to create a LivestockWishlist.
     * 
    **/
    data: XOR<LivestockWishlistCreateInput, LivestockWishlistUncheckedCreateInput>
  }


  /**
   * LivestockWishlist createMany
   */
  export type LivestockWishlistCreateManyArgs = {
    /**
     * The data used to create many LivestockWishlists.
     * 
    **/
    data: Enumerable<LivestockWishlistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LivestockWishlist update
   */
  export type LivestockWishlistUpdateArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * The data needed to update a LivestockWishlist.
     * 
    **/
    data: XOR<LivestockWishlistUpdateInput, LivestockWishlistUncheckedUpdateInput>
    /**
     * Choose, which LivestockWishlist to update.
     * 
    **/
    where: LivestockWishlistWhereUniqueInput
  }


  /**
   * LivestockWishlist updateMany
   */
  export type LivestockWishlistUpdateManyArgs = {
    /**
     * The data used to update LivestockWishlists.
     * 
    **/
    data: XOR<LivestockWishlistUpdateManyMutationInput, LivestockWishlistUncheckedUpdateManyInput>
    /**
     * Filter which LivestockWishlists to update
     * 
    **/
    where?: LivestockWishlistWhereInput
  }


  /**
   * LivestockWishlist upsert
   */
  export type LivestockWishlistUpsertArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * The filter to search for the LivestockWishlist to update in case it exists.
     * 
    **/
    where: LivestockWishlistWhereUniqueInput
    /**
     * In case the LivestockWishlist found by the `where` argument doesn't exist, create a new LivestockWishlist with this data.
     * 
    **/
    create: XOR<LivestockWishlistCreateInput, LivestockWishlistUncheckedCreateInput>
    /**
     * In case the LivestockWishlist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LivestockWishlistUpdateInput, LivestockWishlistUncheckedUpdateInput>
  }


  /**
   * LivestockWishlist delete
   */
  export type LivestockWishlistDeleteArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
    /**
     * Filter which LivestockWishlist to delete.
     * 
    **/
    where: LivestockWishlistWhereUniqueInput
  }


  /**
   * LivestockWishlist deleteMany
   */
  export type LivestockWishlistDeleteManyArgs = {
    /**
     * Filter which LivestockWishlists to delete
     * 
    **/
    where?: LivestockWishlistWhereInput
  }


  /**
   * LivestockWishlist without action
   */
  export type LivestockWishlistArgs = {
    /**
     * Select specific fields to fetch from the LivestockWishlist
     * 
    **/
    select?: LivestockWishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LivestockWishlistInclude | null
  }



  /**
   * Model Address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    zip: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
    zip: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    street: string | null
    city: string | null
    state: string | null
    zip: number | null
    isPrimary: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    street: string | null
    city: string | null
    state: string | null
    zip: number | null
    isPrimary: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    street: number
    city: number
    state: number
    zip: number
    isPrimary: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    zip?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    zip?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    isPrimary?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    isPrimary?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    isPrimary?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs = {
    /**
     * Filter which Address to aggregate.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs = {
    where?: AddressWhereInput
    orderBy?: Enumerable<AddressOrderByWithAggregationInput>
    by: Array<AddressScalarFieldEnum>
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    id: number
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect = {
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    isPrimary?: boolean
    owner?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shop?: boolean | ShopArgs
  }

  export type AddressInclude = {
    owner?: boolean | UserArgs
    shop?: boolean | ShopArgs
  }

  export type AddressGetPayload<
    S extends boolean | null | undefined | AddressArgs,
    U = keyof S
      > = S extends true
        ? Address
    : S extends undefined
    ? never
    : S extends AddressArgs | AddressFindManyArgs
    ?'include' extends U
    ? Address  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'shop' ? ShopGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'shop' ? ShopGetPayload<S['select'][P]> | null :  P extends keyof Address ? Address[P] : never
  } 
    : Address
  : Address


  type AddressCountArgs = Merge<
    Omit<AddressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }
  >

  export interface AddressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Address'> extends True ? CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>> : CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Address'> extends True ? CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>> : CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs>(
      args?: SelectSubset<T, AddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Address>>, PrismaPromise<Array<AddressGetPayload<T>>>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs>(
      args: SelectSubset<T, AddressCreateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs>(
      args?: SelectSubset<T, AddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs>(
      args: SelectSubset<T, AddressDeleteArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs>(
      args: SelectSubset<T, AddressUpdateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs>(
      args?: SelectSubset<T, AddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs>(
      args: SelectSubset<T, AddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs>(
      args: SelectSubset<T, AddressUpsertArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AddressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Throw an Error if a Address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Throw an Error if a Address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     * 
    **/
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Addresses to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address create
   */
  export type AddressCreateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to create a Address.
     * 
    **/
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs = {
    /**
     * The data used to create many Addresses.
     * 
    **/
    data: Enumerable<AddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to update a Address.
     * 
    **/
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs = {
    /**
     * The data used to update Addresses.
     * 
    **/
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The filter to search for the Address to update in case it exists.
     * 
    **/
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     * 
    **/
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter which Address to delete.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs = {
    /**
     * Filter which Addresses to delete
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address without action
   */
  export type AddressArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
  }



  /**
   * Model Image
   */


  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    livestockId: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    livestockId: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
    livestockId: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
    livestockId: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    createdAt: number
    updatedAt: number
    livestockId: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    livestockId?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    livestockId?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
    createdAt?: true
    updatedAt?: true
    livestockId?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
    createdAt?: true
    updatedAt?: true
    livestockId?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    createdAt?: true
    updatedAt?: true
    livestockId?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which Image to aggregate.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs = {
    where?: ImageWhereInput
    orderBy?: Enumerable<ImageOrderByWithAggregationInput>
    by: Array<ImageScalarFieldEnum>
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }


  export type ImageGroupByOutputType = {
    id: number
    url: string
    createdAt: Date
    updatedAt: Date
    livestockId: number | null
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect = {
    id?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Livestock?: boolean | LivestockArgs
    livestockId?: boolean
  }

  export type ImageInclude = {
    Livestock?: boolean | LivestockArgs
  }

  export type ImageGetPayload<
    S extends boolean | null | undefined | ImageArgs,
    U = keyof S
      > = S extends true
        ? Image
    : S extends undefined
    ? never
    : S extends ImageArgs | ImageFindManyArgs
    ?'include' extends U
    ? Image  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Livestock' ? LivestockGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Livestock' ? LivestockGetPayload<S['select'][P]> | null :  P extends keyof Image ? Image[P] : never
  } 
    : Image
  : Image


  type ImageCountArgs = Merge<
    Omit<ImageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }
  >

  export interface ImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs>(
      args?: SelectSubset<T, ImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs>(
      args: SelectSubset<T, ImageCreateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Create many Images.
     *     @param {ImageCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const image = await prisma.image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageCreateManyArgs>(
      args?: SelectSubset<T, ImageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs>(
      args: SelectSubset<T, ImageDeleteArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs>(
      args: SelectSubset<T, ImageUpdateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs>(
      args?: SelectSubset<T, ImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs>(
      args: SelectSubset<T, ImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs>(
      args: SelectSubset<T, ImageUpsertArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Livestock<T extends LivestockArgs = {}>(args?: Subset<T, LivestockArgs>): CheckSelect<T, Prisma__LivestockClient<Livestock | null >, Prisma__LivestockClient<LivestockGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     * 
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Images to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image create
   */
  export type ImageCreateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to create a Image.
     * 
    **/
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image createMany
   */
  export type ImageCreateManyArgs = {
    /**
     * The data used to create many Images.
     * 
    **/
    data: Enumerable<ImageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to update a Image.
     * 
    **/
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs = {
    /**
     * The data used to update Images.
     * 
    **/
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The filter to search for the Image to update in case it exists.
     * 
    **/
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     * 
    **/
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter which Image to delete.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs = {
    /**
     * Filter which Images to delete
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image without action
   */
  export type ImageArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
  }



  /**
   * Model ShopReview
   */


  export type AggregateShopReview = {
    _count: ShopReviewCountAggregateOutputType | null
    _avg: ShopReviewAvgAggregateOutputType | null
    _sum: ShopReviewSumAggregateOutputType | null
    _min: ShopReviewMinAggregateOutputType | null
    _max: ShopReviewMaxAggregateOutputType | null
  }

  export type ShopReviewAvgAggregateOutputType = {
    rating: number | null
    shopId: number | null
  }

  export type ShopReviewSumAggregateOutputType = {
    rating: number | null
    shopId: number | null
  }

  export type ShopReviewMinAggregateOutputType = {
    text: string | null
    rating: number | null
    shopId: number | null
    userId: string | null
  }

  export type ShopReviewMaxAggregateOutputType = {
    text: string | null
    rating: number | null
    shopId: number | null
    userId: string | null
  }

  export type ShopReviewCountAggregateOutputType = {
    text: number
    rating: number
    shopId: number
    userId: number
    _all: number
  }


  export type ShopReviewAvgAggregateInputType = {
    rating?: true
    shopId?: true
  }

  export type ShopReviewSumAggregateInputType = {
    rating?: true
    shopId?: true
  }

  export type ShopReviewMinAggregateInputType = {
    text?: true
    rating?: true
    shopId?: true
    userId?: true
  }

  export type ShopReviewMaxAggregateInputType = {
    text?: true
    rating?: true
    shopId?: true
    userId?: true
  }

  export type ShopReviewCountAggregateInputType = {
    text?: true
    rating?: true
    shopId?: true
    userId?: true
    _all?: true
  }

  export type ShopReviewAggregateArgs = {
    /**
     * Filter which ShopReview to aggregate.
     * 
    **/
    where?: ShopReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopReviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopReviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopReviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShopReviews
    **/
    _count?: true | ShopReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopReviewMaxAggregateInputType
  }

  export type GetShopReviewAggregateType<T extends ShopReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateShopReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopReview[P]>
      : GetScalarType<T[P], AggregateShopReview[P]>
  }




  export type ShopReviewGroupByArgs = {
    where?: ShopReviewWhereInput
    orderBy?: Enumerable<ShopReviewOrderByWithAggregationInput>
    by: Array<ShopReviewScalarFieldEnum>
    having?: ShopReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopReviewCountAggregateInputType | true
    _avg?: ShopReviewAvgAggregateInputType
    _sum?: ShopReviewSumAggregateInputType
    _min?: ShopReviewMinAggregateInputType
    _max?: ShopReviewMaxAggregateInputType
  }


  export type ShopReviewGroupByOutputType = {
    text: string
    rating: number
    shopId: number
    userId: string
    _count: ShopReviewCountAggregateOutputType | null
    _avg: ShopReviewAvgAggregateOutputType | null
    _sum: ShopReviewSumAggregateOutputType | null
    _min: ShopReviewMinAggregateOutputType | null
    _max: ShopReviewMaxAggregateOutputType | null
  }

  type GetShopReviewGroupByPayload<T extends ShopReviewGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ShopReviewGroupByOutputType[P]>
        }
      >
    >


  export type ShopReviewSelect = {
    text?: boolean
    rating?: boolean
    reviewer?: boolean | UserArgs
    shop?: boolean | ShopArgs
    shopId?: boolean
    userId?: boolean
  }

  export type ShopReviewInclude = {
    reviewer?: boolean | UserArgs
    shop?: boolean | ShopArgs
  }

  export type ShopReviewGetPayload<
    S extends boolean | null | undefined | ShopReviewArgs,
    U = keyof S
      > = S extends true
        ? ShopReview
    : S extends undefined
    ? never
    : S extends ShopReviewArgs | ShopReviewFindManyArgs
    ?'include' extends U
    ? ShopReview  & {
    [P in TrueKeys<S['include']>]:
        P extends 'reviewer' ? UserGetPayload<S['include'][P]> :
        P extends 'shop' ? ShopGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'reviewer' ? UserGetPayload<S['select'][P]> :
        P extends 'shop' ? ShopGetPayload<S['select'][P]> :  P extends keyof ShopReview ? ShopReview[P] : never
  } 
    : ShopReview
  : ShopReview


  type ShopReviewCountArgs = Merge<
    Omit<ShopReviewFindManyArgs, 'select' | 'include'> & {
      select?: ShopReviewCountAggregateInputType | true
    }
  >

  export interface ShopReviewDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShopReview that matches the filter.
     * @param {ShopReviewFindUniqueArgs} args - Arguments to find a ShopReview
     * @example
     * // Get one ShopReview
     * const shopReview = await prisma.shopReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopReviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopReviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShopReview'> extends True ? CheckSelect<T, Prisma__ShopReviewClient<ShopReview>, Prisma__ShopReviewClient<ShopReviewGetPayload<T>>> : CheckSelect<T, Prisma__ShopReviewClient<ShopReview | null >, Prisma__ShopReviewClient<ShopReviewGetPayload<T> | null >>

    /**
     * Find the first ShopReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopReviewFindFirstArgs} args - Arguments to find a ShopReview
     * @example
     * // Get one ShopReview
     * const shopReview = await prisma.shopReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopReviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopReviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShopReview'> extends True ? CheckSelect<T, Prisma__ShopReviewClient<ShopReview>, Prisma__ShopReviewClient<ShopReviewGetPayload<T>>> : CheckSelect<T, Prisma__ShopReviewClient<ShopReview | null >, Prisma__ShopReviewClient<ShopReviewGetPayload<T> | null >>

    /**
     * Find zero or more ShopReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShopReviews
     * const shopReviews = await prisma.shopReview.findMany()
     * 
     * // Get first 10 ShopReviews
     * const shopReviews = await prisma.shopReview.findMany({ take: 10 })
     * 
     * // Only select the `text`
     * const shopReviewWithTextOnly = await prisma.shopReview.findMany({ select: { text: true } })
     * 
    **/
    findMany<T extends ShopReviewFindManyArgs>(
      args?: SelectSubset<T, ShopReviewFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShopReview>>, PrismaPromise<Array<ShopReviewGetPayload<T>>>>

    /**
     * Create a ShopReview.
     * @param {ShopReviewCreateArgs} args - Arguments to create a ShopReview.
     * @example
     * // Create one ShopReview
     * const ShopReview = await prisma.shopReview.create({
     *   data: {
     *     // ... data to create a ShopReview
     *   }
     * })
     * 
    **/
    create<T extends ShopReviewCreateArgs>(
      args: SelectSubset<T, ShopReviewCreateArgs>
    ): CheckSelect<T, Prisma__ShopReviewClient<ShopReview>, Prisma__ShopReviewClient<ShopReviewGetPayload<T>>>

    /**
     * Create many ShopReviews.
     *     @param {ShopReviewCreateManyArgs} args - Arguments to create many ShopReviews.
     *     @example
     *     // Create many ShopReviews
     *     const shopReview = await prisma.shopReview.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopReviewCreateManyArgs>(
      args?: SelectSubset<T, ShopReviewCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShopReview.
     * @param {ShopReviewDeleteArgs} args - Arguments to delete one ShopReview.
     * @example
     * // Delete one ShopReview
     * const ShopReview = await prisma.shopReview.delete({
     *   where: {
     *     // ... filter to delete one ShopReview
     *   }
     * })
     * 
    **/
    delete<T extends ShopReviewDeleteArgs>(
      args: SelectSubset<T, ShopReviewDeleteArgs>
    ): CheckSelect<T, Prisma__ShopReviewClient<ShopReview>, Prisma__ShopReviewClient<ShopReviewGetPayload<T>>>

    /**
     * Update one ShopReview.
     * @param {ShopReviewUpdateArgs} args - Arguments to update one ShopReview.
     * @example
     * // Update one ShopReview
     * const shopReview = await prisma.shopReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopReviewUpdateArgs>(
      args: SelectSubset<T, ShopReviewUpdateArgs>
    ): CheckSelect<T, Prisma__ShopReviewClient<ShopReview>, Prisma__ShopReviewClient<ShopReviewGetPayload<T>>>

    /**
     * Delete zero or more ShopReviews.
     * @param {ShopReviewDeleteManyArgs} args - Arguments to filter ShopReviews to delete.
     * @example
     * // Delete a few ShopReviews
     * const { count } = await prisma.shopReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopReviewDeleteManyArgs>(
      args?: SelectSubset<T, ShopReviewDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShopReviews
     * const shopReview = await prisma.shopReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopReviewUpdateManyArgs>(
      args: SelectSubset<T, ShopReviewUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShopReview.
     * @param {ShopReviewUpsertArgs} args - Arguments to update or create a ShopReview.
     * @example
     * // Update or create a ShopReview
     * const shopReview = await prisma.shopReview.upsert({
     *   create: {
     *     // ... data to create a ShopReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShopReview we want to update
     *   }
     * })
    **/
    upsert<T extends ShopReviewUpsertArgs>(
      args: SelectSubset<T, ShopReviewUpsertArgs>
    ): CheckSelect<T, Prisma__ShopReviewClient<ShopReview>, Prisma__ShopReviewClient<ShopReviewGetPayload<T>>>

    /**
     * Count the number of ShopReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopReviewCountArgs} args - Arguments to filter ShopReviews to count.
     * @example
     * // Count the number of ShopReviews
     * const count = await prisma.shopReview.count({
     *   where: {
     *     // ... the filter for the ShopReviews we want to count
     *   }
     * })
    **/
    count<T extends ShopReviewCountArgs>(
      args?: Subset<T, ShopReviewCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShopReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopReviewAggregateArgs>(args: Subset<T, ShopReviewAggregateArgs>): PrismaPromise<GetShopReviewAggregateType<T>>

    /**
     * Group by ShopReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopReviewGroupByArgs['orderBy'] }
        : { orderBy?: ShopReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopReviewGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShopReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopReviewClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    reviewer<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShopReview findUnique
   */
  export type ShopReviewFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * Throw an Error if a ShopReview can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopReview to fetch.
     * 
    **/
    where: ShopReviewWhereUniqueInput
  }


  /**
   * ShopReview findFirst
   */
  export type ShopReviewFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * Throw an Error if a ShopReview can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopReview to fetch.
     * 
    **/
    where?: ShopReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopReviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopReviews.
     * 
    **/
    cursor?: ShopReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopReviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopReviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopReviews.
     * 
    **/
    distinct?: Enumerable<ShopReviewScalarFieldEnum>
  }


  /**
   * ShopReview findMany
   */
  export type ShopReviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * Filter, which ShopReviews to fetch.
     * 
    **/
    where?: ShopReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopReviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShopReviews.
     * 
    **/
    cursor?: ShopReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopReviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopReviews.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopReviewScalarFieldEnum>
  }


  /**
   * ShopReview create
   */
  export type ShopReviewCreateArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * The data needed to create a ShopReview.
     * 
    **/
    data: XOR<ShopReviewCreateInput, ShopReviewUncheckedCreateInput>
  }


  /**
   * ShopReview createMany
   */
  export type ShopReviewCreateManyArgs = {
    /**
     * The data used to create many ShopReviews.
     * 
    **/
    data: Enumerable<ShopReviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShopReview update
   */
  export type ShopReviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * The data needed to update a ShopReview.
     * 
    **/
    data: XOR<ShopReviewUpdateInput, ShopReviewUncheckedUpdateInput>
    /**
     * Choose, which ShopReview to update.
     * 
    **/
    where: ShopReviewWhereUniqueInput
  }


  /**
   * ShopReview updateMany
   */
  export type ShopReviewUpdateManyArgs = {
    /**
     * The data used to update ShopReviews.
     * 
    **/
    data: XOR<ShopReviewUpdateManyMutationInput, ShopReviewUncheckedUpdateManyInput>
    /**
     * Filter which ShopReviews to update
     * 
    **/
    where?: ShopReviewWhereInput
  }


  /**
   * ShopReview upsert
   */
  export type ShopReviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * The filter to search for the ShopReview to update in case it exists.
     * 
    **/
    where: ShopReviewWhereUniqueInput
    /**
     * In case the ShopReview found by the `where` argument doesn't exist, create a new ShopReview with this data.
     * 
    **/
    create: XOR<ShopReviewCreateInput, ShopReviewUncheckedCreateInput>
    /**
     * In case the ShopReview was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopReviewUpdateInput, ShopReviewUncheckedUpdateInput>
  }


  /**
   * ShopReview delete
   */
  export type ShopReviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
    /**
     * Filter which ShopReview to delete.
     * 
    **/
    where: ShopReviewWhereUniqueInput
  }


  /**
   * ShopReview deleteMany
   */
  export type ShopReviewDeleteManyArgs = {
    /**
     * Filter which ShopReviews to delete
     * 
    **/
    where?: ShopReviewWhereInput
  }


  /**
   * ShopReview without action
   */
  export type ShopReviewArgs = {
    /**
     * Select specific fields to fetch from the ShopReview
     * 
    **/
    select?: ShopReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopReviewInclude | null
  }



  /**
   * Model ShopLike
   */


  export type AggregateShopLike = {
    _count: ShopLikeCountAggregateOutputType | null
    _avg: ShopLikeAvgAggregateOutputType | null
    _sum: ShopLikeSumAggregateOutputType | null
    _min: ShopLikeMinAggregateOutputType | null
    _max: ShopLikeMaxAggregateOutputType | null
  }

  export type ShopLikeAvgAggregateOutputType = {
    shopId: number | null
  }

  export type ShopLikeSumAggregateOutputType = {
    shopId: number | null
  }

  export type ShopLikeMinAggregateOutputType = {
    userId: string | null
    shopId: number | null
  }

  export type ShopLikeMaxAggregateOutputType = {
    userId: string | null
    shopId: number | null
  }

  export type ShopLikeCountAggregateOutputType = {
    userId: number
    shopId: number
    _all: number
  }


  export type ShopLikeAvgAggregateInputType = {
    shopId?: true
  }

  export type ShopLikeSumAggregateInputType = {
    shopId?: true
  }

  export type ShopLikeMinAggregateInputType = {
    userId?: true
    shopId?: true
  }

  export type ShopLikeMaxAggregateInputType = {
    userId?: true
    shopId?: true
  }

  export type ShopLikeCountAggregateInputType = {
    userId?: true
    shopId?: true
    _all?: true
  }

  export type ShopLikeAggregateArgs = {
    /**
     * Filter which ShopLike to aggregate.
     * 
    **/
    where?: ShopLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopLikes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShopLikes
    **/
    _count?: true | ShopLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopLikeMaxAggregateInputType
  }

  export type GetShopLikeAggregateType<T extends ShopLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateShopLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopLike[P]>
      : GetScalarType<T[P], AggregateShopLike[P]>
  }




  export type ShopLikeGroupByArgs = {
    where?: ShopLikeWhereInput
    orderBy?: Enumerable<ShopLikeOrderByWithAggregationInput>
    by: Array<ShopLikeScalarFieldEnum>
    having?: ShopLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopLikeCountAggregateInputType | true
    _avg?: ShopLikeAvgAggregateInputType
    _sum?: ShopLikeSumAggregateInputType
    _min?: ShopLikeMinAggregateInputType
    _max?: ShopLikeMaxAggregateInputType
  }


  export type ShopLikeGroupByOutputType = {
    userId: string
    shopId: number
    _count: ShopLikeCountAggregateOutputType | null
    _avg: ShopLikeAvgAggregateOutputType | null
    _sum: ShopLikeSumAggregateOutputType | null
    _min: ShopLikeMinAggregateOutputType | null
    _max: ShopLikeMaxAggregateOutputType | null
  }

  type GetShopLikeGroupByPayload<T extends ShopLikeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ShopLikeGroupByOutputType[P]>
        }
      >
    >


  export type ShopLikeSelect = {
    liker?: boolean | UserArgs
    shop?: boolean | ShopArgs
    userId?: boolean
    shopId?: boolean
  }

  export type ShopLikeInclude = {
    liker?: boolean | UserArgs
    shop?: boolean | ShopArgs
  }

  export type ShopLikeGetPayload<
    S extends boolean | null | undefined | ShopLikeArgs,
    U = keyof S
      > = S extends true
        ? ShopLike
    : S extends undefined
    ? never
    : S extends ShopLikeArgs | ShopLikeFindManyArgs
    ?'include' extends U
    ? ShopLike  & {
    [P in TrueKeys<S['include']>]:
        P extends 'liker' ? UserGetPayload<S['include'][P]> :
        P extends 'shop' ? ShopGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'liker' ? UserGetPayload<S['select'][P]> :
        P extends 'shop' ? ShopGetPayload<S['select'][P]> :  P extends keyof ShopLike ? ShopLike[P] : never
  } 
    : ShopLike
  : ShopLike


  type ShopLikeCountArgs = Merge<
    Omit<ShopLikeFindManyArgs, 'select' | 'include'> & {
      select?: ShopLikeCountAggregateInputType | true
    }
  >

  export interface ShopLikeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShopLike that matches the filter.
     * @param {ShopLikeFindUniqueArgs} args - Arguments to find a ShopLike
     * @example
     * // Get one ShopLike
     * const shopLike = await prisma.shopLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopLikeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopLikeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShopLike'> extends True ? CheckSelect<T, Prisma__ShopLikeClient<ShopLike>, Prisma__ShopLikeClient<ShopLikeGetPayload<T>>> : CheckSelect<T, Prisma__ShopLikeClient<ShopLike | null >, Prisma__ShopLikeClient<ShopLikeGetPayload<T> | null >>

    /**
     * Find the first ShopLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopLikeFindFirstArgs} args - Arguments to find a ShopLike
     * @example
     * // Get one ShopLike
     * const shopLike = await prisma.shopLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopLikeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopLikeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShopLike'> extends True ? CheckSelect<T, Prisma__ShopLikeClient<ShopLike>, Prisma__ShopLikeClient<ShopLikeGetPayload<T>>> : CheckSelect<T, Prisma__ShopLikeClient<ShopLike | null >, Prisma__ShopLikeClient<ShopLikeGetPayload<T> | null >>

    /**
     * Find zero or more ShopLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopLikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShopLikes
     * const shopLikes = await prisma.shopLike.findMany()
     * 
     * // Get first 10 ShopLikes
     * const shopLikes = await prisma.shopLike.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const shopLikeWithUserIdOnly = await prisma.shopLike.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends ShopLikeFindManyArgs>(
      args?: SelectSubset<T, ShopLikeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShopLike>>, PrismaPromise<Array<ShopLikeGetPayload<T>>>>

    /**
     * Create a ShopLike.
     * @param {ShopLikeCreateArgs} args - Arguments to create a ShopLike.
     * @example
     * // Create one ShopLike
     * const ShopLike = await prisma.shopLike.create({
     *   data: {
     *     // ... data to create a ShopLike
     *   }
     * })
     * 
    **/
    create<T extends ShopLikeCreateArgs>(
      args: SelectSubset<T, ShopLikeCreateArgs>
    ): CheckSelect<T, Prisma__ShopLikeClient<ShopLike>, Prisma__ShopLikeClient<ShopLikeGetPayload<T>>>

    /**
     * Create many ShopLikes.
     *     @param {ShopLikeCreateManyArgs} args - Arguments to create many ShopLikes.
     *     @example
     *     // Create many ShopLikes
     *     const shopLike = await prisma.shopLike.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopLikeCreateManyArgs>(
      args?: SelectSubset<T, ShopLikeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShopLike.
     * @param {ShopLikeDeleteArgs} args - Arguments to delete one ShopLike.
     * @example
     * // Delete one ShopLike
     * const ShopLike = await prisma.shopLike.delete({
     *   where: {
     *     // ... filter to delete one ShopLike
     *   }
     * })
     * 
    **/
    delete<T extends ShopLikeDeleteArgs>(
      args: SelectSubset<T, ShopLikeDeleteArgs>
    ): CheckSelect<T, Prisma__ShopLikeClient<ShopLike>, Prisma__ShopLikeClient<ShopLikeGetPayload<T>>>

    /**
     * Update one ShopLike.
     * @param {ShopLikeUpdateArgs} args - Arguments to update one ShopLike.
     * @example
     * // Update one ShopLike
     * const shopLike = await prisma.shopLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopLikeUpdateArgs>(
      args: SelectSubset<T, ShopLikeUpdateArgs>
    ): CheckSelect<T, Prisma__ShopLikeClient<ShopLike>, Prisma__ShopLikeClient<ShopLikeGetPayload<T>>>

    /**
     * Delete zero or more ShopLikes.
     * @param {ShopLikeDeleteManyArgs} args - Arguments to filter ShopLikes to delete.
     * @example
     * // Delete a few ShopLikes
     * const { count } = await prisma.shopLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopLikeDeleteManyArgs>(
      args?: SelectSubset<T, ShopLikeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShopLikes
     * const shopLike = await prisma.shopLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopLikeUpdateManyArgs>(
      args: SelectSubset<T, ShopLikeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShopLike.
     * @param {ShopLikeUpsertArgs} args - Arguments to update or create a ShopLike.
     * @example
     * // Update or create a ShopLike
     * const shopLike = await prisma.shopLike.upsert({
     *   create: {
     *     // ... data to create a ShopLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShopLike we want to update
     *   }
     * })
    **/
    upsert<T extends ShopLikeUpsertArgs>(
      args: SelectSubset<T, ShopLikeUpsertArgs>
    ): CheckSelect<T, Prisma__ShopLikeClient<ShopLike>, Prisma__ShopLikeClient<ShopLikeGetPayload<T>>>

    /**
     * Count the number of ShopLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopLikeCountArgs} args - Arguments to filter ShopLikes to count.
     * @example
     * // Count the number of ShopLikes
     * const count = await prisma.shopLike.count({
     *   where: {
     *     // ... the filter for the ShopLikes we want to count
     *   }
     * })
    **/
    count<T extends ShopLikeCountArgs>(
      args?: Subset<T, ShopLikeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShopLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopLikeAggregateArgs>(args: Subset<T, ShopLikeAggregateArgs>): PrismaPromise<GetShopLikeAggregateType<T>>

    /**
     * Group by ShopLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopLikeGroupByArgs['orderBy'] }
        : { orderBy?: ShopLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopLikeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShopLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopLikeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    liker<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShopLike findUnique
   */
  export type ShopLikeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * Throw an Error if a ShopLike can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopLike to fetch.
     * 
    **/
    where: ShopLikeWhereUniqueInput
  }


  /**
   * ShopLike findFirst
   */
  export type ShopLikeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * Throw an Error if a ShopLike can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopLike to fetch.
     * 
    **/
    where?: ShopLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopLikes.
     * 
    **/
    cursor?: ShopLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopLikes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopLikes.
     * 
    **/
    distinct?: Enumerable<ShopLikeScalarFieldEnum>
  }


  /**
   * ShopLike findMany
   */
  export type ShopLikeFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * Filter, which ShopLikes to fetch.
     * 
    **/
    where?: ShopLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopLikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShopLikes.
     * 
    **/
    cursor?: ShopLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopLikes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopLikeScalarFieldEnum>
  }


  /**
   * ShopLike create
   */
  export type ShopLikeCreateArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * The data needed to create a ShopLike.
     * 
    **/
    data: XOR<ShopLikeCreateInput, ShopLikeUncheckedCreateInput>
  }


  /**
   * ShopLike createMany
   */
  export type ShopLikeCreateManyArgs = {
    /**
     * The data used to create many ShopLikes.
     * 
    **/
    data: Enumerable<ShopLikeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShopLike update
   */
  export type ShopLikeUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * The data needed to update a ShopLike.
     * 
    **/
    data: XOR<ShopLikeUpdateInput, ShopLikeUncheckedUpdateInput>
    /**
     * Choose, which ShopLike to update.
     * 
    **/
    where: ShopLikeWhereUniqueInput
  }


  /**
   * ShopLike updateMany
   */
  export type ShopLikeUpdateManyArgs = {
    /**
     * The data used to update ShopLikes.
     * 
    **/
    data: XOR<ShopLikeUpdateManyMutationInput, ShopLikeUncheckedUpdateManyInput>
    /**
     * Filter which ShopLikes to update
     * 
    **/
    where?: ShopLikeWhereInput
  }


  /**
   * ShopLike upsert
   */
  export type ShopLikeUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * The filter to search for the ShopLike to update in case it exists.
     * 
    **/
    where: ShopLikeWhereUniqueInput
    /**
     * In case the ShopLike found by the `where` argument doesn't exist, create a new ShopLike with this data.
     * 
    **/
    create: XOR<ShopLikeCreateInput, ShopLikeUncheckedCreateInput>
    /**
     * In case the ShopLike was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopLikeUpdateInput, ShopLikeUncheckedUpdateInput>
  }


  /**
   * ShopLike delete
   */
  export type ShopLikeDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
    /**
     * Filter which ShopLike to delete.
     * 
    **/
    where: ShopLikeWhereUniqueInput
  }


  /**
   * ShopLike deleteMany
   */
  export type ShopLikeDeleteManyArgs = {
    /**
     * Filter which ShopLikes to delete
     * 
    **/
    where?: ShopLikeWhereInput
  }


  /**
   * ShopLike without action
   */
  export type ShopLikeArgs = {
    /**
     * Select specific fields to fetch from the ShopLike
     * 
    **/
    select?: ShopLikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopLikeInclude | null
  }



  /**
   * Model Shop
   */


  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    addressId: number | null
  }

  export type ShopSumAggregateOutputType = {
    id: number | null
    rating: number | null
    addressId: number | null
  }

  export type ShopMinAggregateOutputType = {
    id: number | null
    userId: string | null
    name: string | null
    rating: number | null
    addressId: number | null
  }

  export type ShopMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    name: string | null
    rating: number | null
    addressId: number | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    rating: number
    addressId: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    id?: true
    rating?: true
    addressId?: true
  }

  export type ShopSumAggregateInputType = {
    id?: true
    rating?: true
    addressId?: true
  }

  export type ShopMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    rating?: true
    addressId?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    rating?: true
    addressId?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    rating?: true
    addressId?: true
    _all?: true
  }

  export type ShopAggregateArgs = {
    /**
     * Filter which Shop to aggregate.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs = {
    where?: ShopWhereInput
    orderBy?: Enumerable<ShopOrderByWithAggregationInput>
    by: Array<ShopScalarFieldEnum>
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }


  export type ShopGroupByOutputType = {
    id: number
    userId: string
    name: string
    rating: number
    addressId: number
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect = {
    id?: boolean
    owner?: boolean | UserArgs
    userId?: boolean
    name?: boolean
    rating?: boolean
    livestockForSale?: boolean | LivestockFindManyArgs
    locationsAt?: boolean | AddressArgs
    addressId?: boolean
    reviews?: boolean | ShopReviewFindManyArgs
    shopLikes?: boolean | ShopLikeFindManyArgs
    _count?: boolean | ShopCountOutputTypeArgs
  }

  export type ShopInclude = {
    owner?: boolean | UserArgs
    livestockForSale?: boolean | LivestockFindManyArgs
    locationsAt?: boolean | AddressArgs
    reviews?: boolean | ShopReviewFindManyArgs
    shopLikes?: boolean | ShopLikeFindManyArgs
    _count?: boolean | ShopCountOutputTypeArgs
  }

  export type ShopGetPayload<
    S extends boolean | null | undefined | ShopArgs,
    U = keyof S
      > = S extends true
        ? Shop
    : S extends undefined
    ? never
    : S extends ShopArgs | ShopFindManyArgs
    ?'include' extends U
    ? Shop  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'livestockForSale' ? Array < LivestockGetPayload<S['include'][P]>>  :
        P extends 'locationsAt' ? AddressGetPayload<S['include'][P]> | null :
        P extends 'reviews' ? Array < ShopReviewGetPayload<S['include'][P]>>  :
        P extends 'shopLikes' ? Array < ShopLikeGetPayload<S['include'][P]>>  :
        P extends '_count' ? ShopCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'livestockForSale' ? Array < LivestockGetPayload<S['select'][P]>>  :
        P extends 'locationsAt' ? AddressGetPayload<S['select'][P]> | null :
        P extends 'reviews' ? Array < ShopReviewGetPayload<S['select'][P]>>  :
        P extends 'shopLikes' ? Array < ShopLikeGetPayload<S['select'][P]>>  :
        P extends '_count' ? ShopCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Shop ? Shop[P] : never
  } 
    : Shop
  : Shop


  type ShopCountArgs = Merge<
    Omit<ShopFindManyArgs, 'select' | 'include'> & {
      select?: ShopCountAggregateInputType | true
    }
  >

  export interface ShopDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Shop'> extends True ? CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Shop'> extends True ? CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShopFindManyArgs>(
      args?: SelectSubset<T, ShopFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Shop>>, PrismaPromise<Array<ShopGetPayload<T>>>>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
    **/
    create<T extends ShopCreateArgs>(
      args: SelectSubset<T, ShopCreateArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Create many Shops.
     *     @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     *     @example
     *     // Create many Shops
     *     const shop = await prisma.shop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopCreateManyArgs>(
      args?: SelectSubset<T, ShopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
    **/
    delete<T extends ShopDeleteArgs>(
      args: SelectSubset<T, ShopDeleteArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopUpdateArgs>(
      args: SelectSubset<T, ShopUpdateArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopDeleteManyArgs>(
      args?: SelectSubset<T, ShopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopUpdateManyArgs>(
      args: SelectSubset<T, ShopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
    **/
    upsert<T extends ShopUpsertArgs>(
      args: SelectSubset<T, ShopUpsertArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    livestockForSale<T extends LivestockFindManyArgs = {}>(args?: Subset<T, LivestockFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Livestock>>, PrismaPromise<Array<LivestockGetPayload<T>>>>;

    locationsAt<T extends AddressArgs = {}>(args?: Subset<T, AddressArgs>): CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>;

    reviews<T extends ShopReviewFindManyArgs = {}>(args?: Subset<T, ShopReviewFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShopReview>>, PrismaPromise<Array<ShopReviewGetPayload<T>>>>;

    shopLikes<T extends ShopLikeFindManyArgs = {}>(args?: Subset<T, ShopLikeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShopLike>>, PrismaPromise<Array<ShopLikeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Throw an Error if a Shop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Shop to fetch.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Throw an Error if a Shop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Shop to fetch.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     * 
    **/
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * Shop findMany
   */
  export type ShopFindManyArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Filter, which Shops to fetch.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * Shop create
   */
  export type ShopCreateArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * The data needed to create a Shop.
     * 
    **/
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }


  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs = {
    /**
     * The data used to create many Shops.
     * 
    **/
    data: Enumerable<ShopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Shop update
   */
  export type ShopUpdateArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * The data needed to update a Shop.
     * 
    **/
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs = {
    /**
     * The data used to update Shops.
     * 
    **/
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     * 
    **/
    where?: ShopWhereInput
  }


  /**
   * Shop upsert
   */
  export type ShopUpsertArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * The filter to search for the Shop to update in case it exists.
     * 
    **/
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     * 
    **/
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }


  /**
   * Shop delete
   */
  export type ShopDeleteArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Filter which Shop to delete.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs = {
    /**
     * Filter which Shops to delete
     * 
    **/
    where?: ShopWhereInput
  }


  /**
   * Shop without action
   */
  export type ShopArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    avatar: 'avatar',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LivestockScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    discountedPrice: 'discountedPrice',
    quantity: 'quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    shopId: 'shopId'
  };

  export type LivestockScalarFieldEnum = (typeof LivestockScalarFieldEnum)[keyof typeof LivestockScalarFieldEnum]


  export const LivestockWishlistScalarFieldEnum: {
    userId: 'userId',
    livestockId: 'livestockId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LivestockWishlistScalarFieldEnum = (typeof LivestockWishlistScalarFieldEnum)[keyof typeof LivestockWishlistScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    city: 'city',
    state: 'state',
    zip: 'zip',
    isPrimary: 'isPrimary',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    livestockId: 'livestockId'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const ShopReviewScalarFieldEnum: {
    text: 'text',
    rating: 'rating',
    shopId: 'shopId',
    userId: 'userId'
  };

  export type ShopReviewScalarFieldEnum = (typeof ShopReviewScalarFieldEnum)[keyof typeof ShopReviewScalarFieldEnum]


  export const ShopLikeScalarFieldEnum: {
    userId: 'userId',
    shopId: 'shopId'
  };

  export type ShopLikeScalarFieldEnum = (typeof ShopLikeScalarFieldEnum)[keyof typeof ShopLikeScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    rating: 'rating',
    addressId: 'addressId'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    address?: XOR<AddressRelationFilter, AddressWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
    shop?: XOR<ShopRelationFilter, ShopWhereInput> | null
    review?: ShopReviewListRelationFilter
    shopLikes?: ShopLikeListRelationFilter
    wishlist?: LivestockWishlistListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    title?: SortOrder
    address?: AddressOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shop?: ShopOrderByWithRelationInput
    review?: ShopReviewOrderByRelationAggregateInput
    shopLikes?: ShopLikeOrderByRelationAggregateInput
    wishlist?: LivestockWishlistOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    avatar?: StringNullableWithAggregatesFilter | string | null
    title?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type LivestockWhereInput = {
    AND?: Enumerable<LivestockWhereInput>
    OR?: Enumerable<LivestockWhereInput>
    NOT?: Enumerable<LivestockWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    images?: ImageListRelationFilter
    price?: FloatFilter | number
    discountedPrice?: FloatFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    shop?: XOR<ShopRelationFilter, ShopWhereInput> | null
    shopId?: IntNullableFilter | number | null
    LivestockWishlist?: LivestockWishlistListRelationFilter
  }

  export type LivestockOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    images?: ImageOrderByRelationAggregateInput
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shop?: ShopOrderByWithRelationInput
    shopId?: SortOrder
    LivestockWishlist?: LivestockWishlistOrderByRelationAggregateInput
  }

  export type LivestockWhereUniqueInput = {
    id?: number
  }

  export type LivestockOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopId?: SortOrder
    _count?: LivestockCountOrderByAggregateInput
    _avg?: LivestockAvgOrderByAggregateInput
    _max?: LivestockMaxOrderByAggregateInput
    _min?: LivestockMinOrderByAggregateInput
    _sum?: LivestockSumOrderByAggregateInput
  }

  export type LivestockScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LivestockScalarWhereWithAggregatesInput>
    OR?: Enumerable<LivestockScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LivestockScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    discountedPrice?: FloatWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    shopId?: IntNullableWithAggregatesFilter | number | null
  }

  export type LivestockWishlistWhereInput = {
    AND?: Enumerable<LivestockWishlistWhereInput>
    OR?: Enumerable<LivestockWishlistWhereInput>
    NOT?: Enumerable<LivestockWishlistWhereInput>
    owner?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    livestock?: XOR<LivestockRelationFilter, LivestockWhereInput>
    livestockId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LivestockWishlistOrderByWithRelationInput = {
    owner?: UserOrderByWithRelationInput
    userId?: SortOrder
    livestock?: LivestockOrderByWithRelationInput
    livestockId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LivestockWishlistWhereUniqueInput = {
    livestockId_userId?: LivestockWishlistLivestockIdUserIdCompoundUniqueInput
  }

  export type LivestockWishlistOrderByWithAggregationInput = {
    userId?: SortOrder
    livestockId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LivestockWishlistCountOrderByAggregateInput
    _avg?: LivestockWishlistAvgOrderByAggregateInput
    _max?: LivestockWishlistMaxOrderByAggregateInput
    _min?: LivestockWishlistMinOrderByAggregateInput
    _sum?: LivestockWishlistSumOrderByAggregateInput
  }

  export type LivestockWishlistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LivestockWishlistScalarWhereWithAggregatesInput>
    OR?: Enumerable<LivestockWishlistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LivestockWishlistScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    livestockId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AddressWhereInput = {
    AND?: Enumerable<AddressWhereInput>
    OR?: Enumerable<AddressWhereInput>
    NOT?: Enumerable<AddressWhereInput>
    id?: IntFilter | number
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    zip?: IntFilter | number
    isPrimary?: BoolFilter | boolean
    owner?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    shop?: XOR<ShopRelationFilter, ShopWhereInput> | null
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    isPrimary?: SortOrder
    owner?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shop?: ShopOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = {
    id?: number
    userId?: string
  }

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<AddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AddressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    zip?: IntWithAggregatesFilter | number
    isPrimary?: BoolWithAggregatesFilter | boolean
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ImageWhereInput = {
    AND?: Enumerable<ImageWhereInput>
    OR?: Enumerable<ImageWhereInput>
    NOT?: Enumerable<ImageWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Livestock?: XOR<LivestockRelationFilter, LivestockWhereInput> | null
    livestockId?: IntNullableFilter | number | null
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Livestock?: LivestockOrderByWithRelationInput
    livestockId?: SortOrder
  }

  export type ImageWhereUniqueInput = {
    id?: number
  }

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    livestockId?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    url?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    livestockId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ShopReviewWhereInput = {
    AND?: Enumerable<ShopReviewWhereInput>
    OR?: Enumerable<ShopReviewWhereInput>
    NOT?: Enumerable<ShopReviewWhereInput>
    text?: StringFilter | string
    rating?: FloatFilter | number
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
    shopId?: IntFilter | number
    userId?: StringFilter | string
  }

  export type ShopReviewOrderByWithRelationInput = {
    text?: SortOrder
    rating?: SortOrder
    reviewer?: UserOrderByWithRelationInput
    shop?: ShopOrderByWithRelationInput
    shopId?: SortOrder
    userId?: SortOrder
  }

  export type ShopReviewWhereUniqueInput = {
    shopId_userId?: ShopReviewShopIdUserIdCompoundUniqueInput
  }

  export type ShopReviewOrderByWithAggregationInput = {
    text?: SortOrder
    rating?: SortOrder
    shopId?: SortOrder
    userId?: SortOrder
    _count?: ShopReviewCountOrderByAggregateInput
    _avg?: ShopReviewAvgOrderByAggregateInput
    _max?: ShopReviewMaxOrderByAggregateInput
    _min?: ShopReviewMinOrderByAggregateInput
    _sum?: ShopReviewSumOrderByAggregateInput
  }

  export type ShopReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopReviewScalarWhereWithAggregatesInput>
    text?: StringWithAggregatesFilter | string
    rating?: FloatWithAggregatesFilter | number
    shopId?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
  }

  export type ShopLikeWhereInput = {
    AND?: Enumerable<ShopLikeWhereInput>
    OR?: Enumerable<ShopLikeWhereInput>
    NOT?: Enumerable<ShopLikeWhereInput>
    liker?: XOR<UserRelationFilter, UserWhereInput>
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
    userId?: StringFilter | string
    shopId?: IntFilter | number
  }

  export type ShopLikeOrderByWithRelationInput = {
    liker?: UserOrderByWithRelationInput
    shop?: ShopOrderByWithRelationInput
    userId?: SortOrder
    shopId?: SortOrder
  }

  export type ShopLikeWhereUniqueInput = {
    userId_shopId?: ShopLikeUserIdShopIdCompoundUniqueInput
  }

  export type ShopLikeOrderByWithAggregationInput = {
    userId?: SortOrder
    shopId?: SortOrder
    _count?: ShopLikeCountOrderByAggregateInput
    _avg?: ShopLikeAvgOrderByAggregateInput
    _max?: ShopLikeMaxOrderByAggregateInput
    _min?: ShopLikeMinOrderByAggregateInput
    _sum?: ShopLikeSumOrderByAggregateInput
  }

  export type ShopLikeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopLikeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopLikeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopLikeScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    shopId?: IntWithAggregatesFilter | number
  }

  export type ShopWhereInput = {
    AND?: Enumerable<ShopWhereInput>
    OR?: Enumerable<ShopWhereInput>
    NOT?: Enumerable<ShopWhereInput>
    id?: IntFilter | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    name?: StringFilter | string
    rating?: FloatFilter | number
    livestockForSale?: LivestockListRelationFilter
    locationsAt?: XOR<AddressRelationFilter, AddressWhereInput> | null
    addressId?: IntFilter | number
    reviews?: ShopReviewListRelationFilter
    shopLikes?: ShopLikeListRelationFilter
  }

  export type ShopOrderByWithRelationInput = {
    id?: SortOrder
    owner?: UserOrderByWithRelationInput
    userId?: SortOrder
    name?: SortOrder
    rating?: SortOrder
    livestockForSale?: LivestockOrderByRelationAggregateInput
    locationsAt?: AddressOrderByWithRelationInput
    addressId?: SortOrder
    reviews?: ShopReviewOrderByRelationAggregateInput
    shopLikes?: ShopLikeOrderByRelationAggregateInput
  }

  export type ShopWhereUniqueInput = {
    id?: number
    userId?: string
    addressId?: number
  }

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    rating?: SortOrder
    addressId?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _avg?: ShopAvgOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
    _sum?: ShopSumOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    rating?: FloatWithAggregatesFilter | number
    addressId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopCreateNestedOneWithoutOwnerInput
    review?: ShopReviewCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressUncheckedCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopUncheckedCreateNestedOneWithoutOwnerInput
    review?: ShopReviewUncheckedCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUpdateOneWithoutOwnerInput
    review?: ShopReviewUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUpdateManyWithoutOwnerInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUncheckedUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUncheckedUpdateOneWithoutOwnerInput
    review?: ShopReviewUncheckedUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedUpdateManyWithoutOwnerInput
  }

  export type UserCreateManyInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LivestockCreateInput = {
    name: string
    images?: ImageCreateNestedManyWithoutLivestockInput
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopCreateNestedOneWithoutLivestockForSaleInput
    LivestockWishlist?: LivestockWishlistCreateNestedManyWithoutLivestockInput
  }

  export type LivestockUncheckedCreateInput = {
    id?: number
    name: string
    images?: ImageUncheckedCreateNestedManyWithoutLivestockInput
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shopId?: number | null
    LivestockWishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutLivestockInput
  }

  export type LivestockUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    images?: ImageUpdateManyWithoutLivestockInput
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUpdateOneWithoutLivestockForSaleInput
    LivestockWishlist?: LivestockWishlistUpdateManyWithoutLivestockInput
  }

  export type LivestockUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    images?: ImageUncheckedUpdateManyWithoutLivestockInput
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopId?: NullableIntFieldUpdateOperationsInput | number | null
    LivestockWishlist?: LivestockWishlistUncheckedUpdateManyWithoutLivestockInput
  }

  export type LivestockCreateManyInput = {
    id?: number
    name: string
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shopId?: number | null
  }

  export type LivestockUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LivestockWishlistCreateInput = {
    owner: UserCreateNestedOneWithoutWishlistInput
    livestock: LivestockCreateNestedOneWithoutLivestockWishlistInput
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistUncheckedCreateInput = {
    userId: string
    livestockId: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistUpdateInput = {
    owner?: UserUpdateOneRequiredWithoutWishlistInput
    livestock?: LivestockUpdateOneRequiredWithoutLivestockWishlistInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    livestockId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistCreateManyInput = {
    userId: string
    livestockId: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    livestockId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    owner: UserCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopCreateNestedOneWithoutLocationsAtInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    userId: string
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopUncheckedCreateNestedOneWithoutLocationsAtInput
  }

  export type AddressUpdateInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUpdateOneWithoutLocationsAtInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUncheckedUpdateOneWithoutLocationsAtInput
  }

  export type AddressCreateManyInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    userId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    url: string
    createdAt?: Date | string
    updatedAt: Date | string
    Livestock?: LivestockCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    url: string
    createdAt?: Date | string
    updatedAt: Date | string
    livestockId?: number | null
  }

  export type ImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Livestock?: LivestockUpdateOneWithoutImagesInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    livestockId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageCreateManyInput = {
    id?: number
    url: string
    createdAt?: Date | string
    updatedAt: Date | string
    livestockId?: number | null
  }

  export type ImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    livestockId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShopReviewCreateInput = {
    text: string
    rating: number
    reviewer: UserCreateNestedOneWithoutReviewInput
    shop: ShopCreateNestedOneWithoutReviewsInput
  }

  export type ShopReviewUncheckedCreateInput = {
    text: string
    rating: number
    shopId: number
    userId: string
  }

  export type ShopReviewUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    reviewer?: UserUpdateOneRequiredWithoutReviewInput
    shop?: ShopUpdateOneRequiredWithoutReviewsInput
  }

  export type ShopReviewUncheckedUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    shopId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ShopReviewCreateManyInput = {
    text: string
    rating: number
    shopId: number
    userId: string
  }

  export type ShopReviewUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ShopReviewUncheckedUpdateManyInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    shopId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ShopLikeCreateInput = {
    liker: UserCreateNestedOneWithoutShopLikesInput
    shop: ShopCreateNestedOneWithoutShopLikesInput
  }

  export type ShopLikeUncheckedCreateInput = {
    userId: string
    shopId: number
  }

  export type ShopLikeUpdateInput = {
    liker?: UserUpdateOneRequiredWithoutShopLikesInput
    shop?: ShopUpdateOneRequiredWithoutShopLikesInput
  }

  export type ShopLikeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    shopId?: IntFieldUpdateOperationsInput | number
  }

  export type ShopLikeCreateManyInput = {
    userId: string
    shopId: number
  }

  export type ShopLikeUpdateManyMutationInput = {

  }

  export type ShopLikeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    shopId?: IntFieldUpdateOperationsInput | number
  }

  export type ShopCreateInput = {
    owner: UserCreateNestedOneWithoutShopInput
    name: string
    rating?: number
    livestockForSale?: LivestockCreateNestedManyWithoutShopInput
    locationsAt?: AddressCreateNestedOneWithoutShopInput
    reviews?: ShopReviewCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateInput = {
    id?: number
    userId: string
    name: string
    rating?: number
    livestockForSale?: LivestockUncheckedCreateNestedManyWithoutShopInput
    addressId: number
    reviews?: ShopReviewUncheckedCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopUpdateInput = {
    owner?: UserUpdateOneRequiredWithoutShopInput
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUpdateManyWithoutShopInput
    locationsAt?: AddressUpdateOneWithoutShopInput
    reviews?: ShopReviewUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUpdateManyWithoutShopInput
  }

  export type ShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUncheckedUpdateManyWithoutShopInput
    addressId?: IntFieldUpdateOperationsInput | number
    reviews?: ShopReviewUncheckedUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutShopInput
  }

  export type ShopCreateManyInput = {
    id?: number
    userId: string
    name: string
    rating?: number
    addressId: number
  }

  export type ShopUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ShopRelationFilter = {
    is?: ShopWhereInput | null
    isNot?: ShopWhereInput | null
  }

  export type ShopReviewListRelationFilter = {
    every?: ShopReviewWhereInput
    some?: ShopReviewWhereInput
    none?: ShopReviewWhereInput
  }

  export type ShopLikeListRelationFilter = {
    every?: ShopLikeWhereInput
    some?: ShopLikeWhereInput
    none?: ShopLikeWhereInput
  }

  export type LivestockWishlistListRelationFilter = {
    every?: LivestockWishlistWhereInput
    some?: LivestockWishlistWhereInput
    none?: LivestockWishlistWhereInput
  }

  export type ShopReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LivestockWishlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LivestockCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopId?: SortOrder
  }

  export type LivestockAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    shopId?: SortOrder
  }

  export type LivestockMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopId?: SortOrder
  }

  export type LivestockMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopId?: SortOrder
  }

  export type LivestockSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    quantity?: SortOrder
    shopId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LivestockRelationFilter = {
    is?: LivestockWhereInput | null
    isNot?: LivestockWhereInput | null
  }

  export type LivestockWishlistLivestockIdUserIdCompoundUniqueInput = {
    livestockId: number
    userId: string
  }

  export type LivestockWishlistCountOrderByAggregateInput = {
    userId?: SortOrder
    livestockId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LivestockWishlistAvgOrderByAggregateInput = {
    livestockId?: SortOrder
  }

  export type LivestockWishlistMaxOrderByAggregateInput = {
    userId?: SortOrder
    livestockId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LivestockWishlistMinOrderByAggregateInput = {
    userId?: SortOrder
    livestockId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LivestockWishlistSumOrderByAggregateInput = {
    livestockId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
    zip?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
    zip?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    livestockId?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    livestockId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    livestockId?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    livestockId?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    livestockId?: SortOrder
  }

  export type ShopReviewShopIdUserIdCompoundUniqueInput = {
    shopId: number
    userId: string
  }

  export type ShopReviewCountOrderByAggregateInput = {
    text?: SortOrder
    rating?: SortOrder
    shopId?: SortOrder
    userId?: SortOrder
  }

  export type ShopReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
    shopId?: SortOrder
  }

  export type ShopReviewMaxOrderByAggregateInput = {
    text?: SortOrder
    rating?: SortOrder
    shopId?: SortOrder
    userId?: SortOrder
  }

  export type ShopReviewMinOrderByAggregateInput = {
    text?: SortOrder
    rating?: SortOrder
    shopId?: SortOrder
    userId?: SortOrder
  }

  export type ShopReviewSumOrderByAggregateInput = {
    rating?: SortOrder
    shopId?: SortOrder
  }

  export type ShopLikeUserIdShopIdCompoundUniqueInput = {
    userId: string
    shopId: number
  }

  export type ShopLikeCountOrderByAggregateInput = {
    userId?: SortOrder
    shopId?: SortOrder
  }

  export type ShopLikeAvgOrderByAggregateInput = {
    shopId?: SortOrder
  }

  export type ShopLikeMaxOrderByAggregateInput = {
    userId?: SortOrder
    shopId?: SortOrder
  }

  export type ShopLikeMinOrderByAggregateInput = {
    userId?: SortOrder
    shopId?: SortOrder
  }

  export type ShopLikeSumOrderByAggregateInput = {
    shopId?: SortOrder
  }

  export type LivestockListRelationFilter = {
    every?: LivestockWhereInput
    some?: LivestockWhereInput
    none?: LivestockWhereInput
  }

  export type LivestockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    rating?: SortOrder
    addressId?: SortOrder
  }

  export type ShopAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    addressId?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    rating?: SortOrder
    addressId?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    rating?: SortOrder
    addressId?: SortOrder
  }

  export type ShopSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    addressId?: SortOrder
  }

  export type AddressCreateNestedOneWithoutOwnerInput = {
    create?: XOR<AddressCreateWithoutOwnerInput, AddressUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: AddressCreateOrConnectWithoutOwnerInput
    connect?: AddressWhereUniqueInput
  }

  export type ShopCreateNestedOneWithoutOwnerInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopReviewCreateNestedManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutReviewerInput>, Enumerable<ShopReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutReviewerInput>
    createMany?: ShopReviewCreateManyReviewerInputEnvelope
    connect?: Enumerable<ShopReviewWhereUniqueInput>
  }

  export type ShopLikeCreateNestedManyWithoutLikerInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutLikerInput>, Enumerable<ShopLikeUncheckedCreateWithoutLikerInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutLikerInput>
    createMany?: ShopLikeCreateManyLikerInputEnvelope
    connect?: Enumerable<ShopLikeWhereUniqueInput>
  }

  export type LivestockWishlistCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutOwnerInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutOwnerInput>
    createMany?: LivestockWishlistCreateManyOwnerInputEnvelope
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
  }

  export type AddressUncheckedCreateNestedOneWithoutOwnerInput = {
    create?: XOR<AddressCreateWithoutOwnerInput, AddressUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: AddressCreateOrConnectWithoutOwnerInput
    connect?: AddressWhereUniqueInput
  }

  export type ShopUncheckedCreateNestedOneWithoutOwnerInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopReviewUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutReviewerInput>, Enumerable<ShopReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutReviewerInput>
    createMany?: ShopReviewCreateManyReviewerInputEnvelope
    connect?: Enumerable<ShopReviewWhereUniqueInput>
  }

  export type ShopLikeUncheckedCreateNestedManyWithoutLikerInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutLikerInput>, Enumerable<ShopLikeUncheckedCreateWithoutLikerInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutLikerInput>
    createMany?: ShopLikeCreateManyLikerInputEnvelope
    connect?: Enumerable<ShopLikeWhereUniqueInput>
  }

  export type LivestockWishlistUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutOwnerInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutOwnerInput>
    createMany?: LivestockWishlistCreateManyOwnerInputEnvelope
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AddressUpdateOneWithoutOwnerInput = {
    create?: XOR<AddressCreateWithoutOwnerInput, AddressUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: AddressCreateOrConnectWithoutOwnerInput
    upsert?: AddressUpsertWithoutOwnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutOwnerInput, AddressUncheckedUpdateWithoutOwnerInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ShopUpdateOneWithoutOwnerInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput
    upsert?: ShopUpsertWithoutOwnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutOwnerInput, ShopUncheckedUpdateWithoutOwnerInput>
  }

  export type ShopReviewUpdateManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutReviewerInput>, Enumerable<ShopReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutReviewerInput>
    upsert?: Enumerable<ShopReviewUpsertWithWhereUniqueWithoutReviewerInput>
    createMany?: ShopReviewCreateManyReviewerInputEnvelope
    set?: Enumerable<ShopReviewWhereUniqueInput>
    disconnect?: Enumerable<ShopReviewWhereUniqueInput>
    delete?: Enumerable<ShopReviewWhereUniqueInput>
    connect?: Enumerable<ShopReviewWhereUniqueInput>
    update?: Enumerable<ShopReviewUpdateWithWhereUniqueWithoutReviewerInput>
    updateMany?: Enumerable<ShopReviewUpdateManyWithWhereWithoutReviewerInput>
    deleteMany?: Enumerable<ShopReviewScalarWhereInput>
  }

  export type ShopLikeUpdateManyWithoutLikerInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutLikerInput>, Enumerable<ShopLikeUncheckedCreateWithoutLikerInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutLikerInput>
    upsert?: Enumerable<ShopLikeUpsertWithWhereUniqueWithoutLikerInput>
    createMany?: ShopLikeCreateManyLikerInputEnvelope
    set?: Enumerable<ShopLikeWhereUniqueInput>
    disconnect?: Enumerable<ShopLikeWhereUniqueInput>
    delete?: Enumerable<ShopLikeWhereUniqueInput>
    connect?: Enumerable<ShopLikeWhereUniqueInput>
    update?: Enumerable<ShopLikeUpdateWithWhereUniqueWithoutLikerInput>
    updateMany?: Enumerable<ShopLikeUpdateManyWithWhereWithoutLikerInput>
    deleteMany?: Enumerable<ShopLikeScalarWhereInput>
  }

  export type LivestockWishlistUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutOwnerInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<LivestockWishlistUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: LivestockWishlistCreateManyOwnerInputEnvelope
    set?: Enumerable<LivestockWishlistWhereUniqueInput>
    disconnect?: Enumerable<LivestockWishlistWhereUniqueInput>
    delete?: Enumerable<LivestockWishlistWhereUniqueInput>
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
    update?: Enumerable<LivestockWishlistUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<LivestockWishlistUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<LivestockWishlistScalarWhereInput>
  }

  export type AddressUncheckedUpdateOneWithoutOwnerInput = {
    create?: XOR<AddressCreateWithoutOwnerInput, AddressUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: AddressCreateOrConnectWithoutOwnerInput
    upsert?: AddressUpsertWithoutOwnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutOwnerInput, AddressUncheckedUpdateWithoutOwnerInput>
  }

  export type ShopUncheckedUpdateOneWithoutOwnerInput = {
    create?: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOwnerInput
    upsert?: ShopUpsertWithoutOwnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutOwnerInput, ShopUncheckedUpdateWithoutOwnerInput>
  }

  export type ShopReviewUncheckedUpdateManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutReviewerInput>, Enumerable<ShopReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutReviewerInput>
    upsert?: Enumerable<ShopReviewUpsertWithWhereUniqueWithoutReviewerInput>
    createMany?: ShopReviewCreateManyReviewerInputEnvelope
    set?: Enumerable<ShopReviewWhereUniqueInput>
    disconnect?: Enumerable<ShopReviewWhereUniqueInput>
    delete?: Enumerable<ShopReviewWhereUniqueInput>
    connect?: Enumerable<ShopReviewWhereUniqueInput>
    update?: Enumerable<ShopReviewUpdateWithWhereUniqueWithoutReviewerInput>
    updateMany?: Enumerable<ShopReviewUpdateManyWithWhereWithoutReviewerInput>
    deleteMany?: Enumerable<ShopReviewScalarWhereInput>
  }

  export type ShopLikeUncheckedUpdateManyWithoutLikerInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutLikerInput>, Enumerable<ShopLikeUncheckedCreateWithoutLikerInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutLikerInput>
    upsert?: Enumerable<ShopLikeUpsertWithWhereUniqueWithoutLikerInput>
    createMany?: ShopLikeCreateManyLikerInputEnvelope
    set?: Enumerable<ShopLikeWhereUniqueInput>
    disconnect?: Enumerable<ShopLikeWhereUniqueInput>
    delete?: Enumerable<ShopLikeWhereUniqueInput>
    connect?: Enumerable<ShopLikeWhereUniqueInput>
    update?: Enumerable<ShopLikeUpdateWithWhereUniqueWithoutLikerInput>
    updateMany?: Enumerable<ShopLikeUpdateManyWithWhereWithoutLikerInput>
    deleteMany?: Enumerable<ShopLikeScalarWhereInput>
  }

  export type LivestockWishlistUncheckedUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutOwnerInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<LivestockWishlistUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: LivestockWishlistCreateManyOwnerInputEnvelope
    set?: Enumerable<LivestockWishlistWhereUniqueInput>
    disconnect?: Enumerable<LivestockWishlistWhereUniqueInput>
    delete?: Enumerable<LivestockWishlistWhereUniqueInput>
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
    update?: Enumerable<LivestockWishlistUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<LivestockWishlistUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<LivestockWishlistScalarWhereInput>
  }

  export type ImageCreateNestedManyWithoutLivestockInput = {
    create?: XOR<Enumerable<ImageCreateWithoutLivestockInput>, Enumerable<ImageUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutLivestockInput>
    createMany?: ImageCreateManyLivestockInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type ShopCreateNestedOneWithoutLivestockForSaleInput = {
    create?: XOR<ShopCreateWithoutLivestockForSaleInput, ShopUncheckedCreateWithoutLivestockForSaleInput>
    connectOrCreate?: ShopCreateOrConnectWithoutLivestockForSaleInput
    connect?: ShopWhereUniqueInput
  }

  export type LivestockWishlistCreateNestedManyWithoutLivestockInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutLivestockInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutLivestockInput>
    createMany?: LivestockWishlistCreateManyLivestockInputEnvelope
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
  }

  export type ImageUncheckedCreateNestedManyWithoutLivestockInput = {
    create?: XOR<Enumerable<ImageCreateWithoutLivestockInput>, Enumerable<ImageUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutLivestockInput>
    createMany?: ImageCreateManyLivestockInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type LivestockWishlistUncheckedCreateNestedManyWithoutLivestockInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutLivestockInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutLivestockInput>
    createMany?: LivestockWishlistCreateManyLivestockInputEnvelope
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
  }

  export type ImageUpdateManyWithoutLivestockInput = {
    create?: XOR<Enumerable<ImageCreateWithoutLivestockInput>, Enumerable<ImageUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutLivestockInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutLivestockInput>
    createMany?: ImageCreateManyLivestockInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutLivestockInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutLivestockInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShopUpdateOneWithoutLivestockForSaleInput = {
    create?: XOR<ShopCreateWithoutLivestockForSaleInput, ShopUncheckedCreateWithoutLivestockForSaleInput>
    connectOrCreate?: ShopCreateOrConnectWithoutLivestockForSaleInput
    upsert?: ShopUpsertWithoutLivestockForSaleInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutLivestockForSaleInput, ShopUncheckedUpdateWithoutLivestockForSaleInput>
  }

  export type LivestockWishlistUpdateManyWithoutLivestockInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutLivestockInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutLivestockInput>
    upsert?: Enumerable<LivestockWishlistUpsertWithWhereUniqueWithoutLivestockInput>
    createMany?: LivestockWishlistCreateManyLivestockInputEnvelope
    set?: Enumerable<LivestockWishlistWhereUniqueInput>
    disconnect?: Enumerable<LivestockWishlistWhereUniqueInput>
    delete?: Enumerable<LivestockWishlistWhereUniqueInput>
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
    update?: Enumerable<LivestockWishlistUpdateWithWhereUniqueWithoutLivestockInput>
    updateMany?: Enumerable<LivestockWishlistUpdateManyWithWhereWithoutLivestockInput>
    deleteMany?: Enumerable<LivestockWishlistScalarWhereInput>
  }

  export type ImageUncheckedUpdateManyWithoutLivestockInput = {
    create?: XOR<Enumerable<ImageCreateWithoutLivestockInput>, Enumerable<ImageUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutLivestockInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutLivestockInput>
    createMany?: ImageCreateManyLivestockInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutLivestockInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutLivestockInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LivestockWishlistUncheckedUpdateManyWithoutLivestockInput = {
    create?: XOR<Enumerable<LivestockWishlistCreateWithoutLivestockInput>, Enumerable<LivestockWishlistUncheckedCreateWithoutLivestockInput>>
    connectOrCreate?: Enumerable<LivestockWishlistCreateOrConnectWithoutLivestockInput>
    upsert?: Enumerable<LivestockWishlistUpsertWithWhereUniqueWithoutLivestockInput>
    createMany?: LivestockWishlistCreateManyLivestockInputEnvelope
    set?: Enumerable<LivestockWishlistWhereUniqueInput>
    disconnect?: Enumerable<LivestockWishlistWhereUniqueInput>
    delete?: Enumerable<LivestockWishlistWhereUniqueInput>
    connect?: Enumerable<LivestockWishlistWhereUniqueInput>
    update?: Enumerable<LivestockWishlistUpdateWithWhereUniqueWithoutLivestockInput>
    updateMany?: Enumerable<LivestockWishlistUpdateManyWithWhereWithoutLivestockInput>
    deleteMany?: Enumerable<LivestockWishlistScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutWishlistInput = {
    create?: XOR<UserCreateWithoutWishlistInput, UserUncheckedCreateWithoutWishlistInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishlistInput
    connect?: UserWhereUniqueInput
  }

  export type LivestockCreateNestedOneWithoutLivestockWishlistInput = {
    create?: XOR<LivestockCreateWithoutLivestockWishlistInput, LivestockUncheckedCreateWithoutLivestockWishlistInput>
    connectOrCreate?: LivestockCreateOrConnectWithoutLivestockWishlistInput
    connect?: LivestockWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWishlistInput = {
    create?: XOR<UserCreateWithoutWishlistInput, UserUncheckedCreateWithoutWishlistInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishlistInput
    upsert?: UserUpsertWithoutWishlistInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWishlistInput, UserUncheckedUpdateWithoutWishlistInput>
  }

  export type LivestockUpdateOneRequiredWithoutLivestockWishlistInput = {
    create?: XOR<LivestockCreateWithoutLivestockWishlistInput, LivestockUncheckedCreateWithoutLivestockWishlistInput>
    connectOrCreate?: LivestockCreateOrConnectWithoutLivestockWishlistInput
    upsert?: LivestockUpsertWithoutLivestockWishlistInput
    connect?: LivestockWhereUniqueInput
    update?: XOR<LivestockUpdateWithoutLivestockWishlistInput, LivestockUncheckedUpdateWithoutLivestockWishlistInput>
  }

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    connect?: UserWhereUniqueInput
  }

  export type ShopCreateNestedOneWithoutLocationsAtInput = {
    create?: XOR<ShopCreateWithoutLocationsAtInput, ShopUncheckedCreateWithoutLocationsAtInput>
    connectOrCreate?: ShopCreateOrConnectWithoutLocationsAtInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopUncheckedCreateNestedOneWithoutLocationsAtInput = {
    create?: XOR<ShopCreateWithoutLocationsAtInput, ShopUncheckedCreateWithoutLocationsAtInput>
    connectOrCreate?: ShopCreateOrConnectWithoutLocationsAtInput
    connect?: ShopWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type ShopUpdateOneWithoutLocationsAtInput = {
    create?: XOR<ShopCreateWithoutLocationsAtInput, ShopUncheckedCreateWithoutLocationsAtInput>
    connectOrCreate?: ShopCreateOrConnectWithoutLocationsAtInput
    upsert?: ShopUpsertWithoutLocationsAtInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutLocationsAtInput, ShopUncheckedUpdateWithoutLocationsAtInput>
  }

  export type ShopUncheckedUpdateOneWithoutLocationsAtInput = {
    create?: XOR<ShopCreateWithoutLocationsAtInput, ShopUncheckedCreateWithoutLocationsAtInput>
    connectOrCreate?: ShopCreateOrConnectWithoutLocationsAtInput
    upsert?: ShopUpsertWithoutLocationsAtInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutLocationsAtInput, ShopUncheckedUpdateWithoutLocationsAtInput>
  }

  export type LivestockCreateNestedOneWithoutImagesInput = {
    create?: XOR<LivestockCreateWithoutImagesInput, LivestockUncheckedCreateWithoutImagesInput>
    connectOrCreate?: LivestockCreateOrConnectWithoutImagesInput
    connect?: LivestockWhereUniqueInput
  }

  export type LivestockUpdateOneWithoutImagesInput = {
    create?: XOR<LivestockCreateWithoutImagesInput, LivestockUncheckedCreateWithoutImagesInput>
    connectOrCreate?: LivestockCreateOrConnectWithoutImagesInput
    upsert?: LivestockUpsertWithoutImagesInput
    disconnect?: boolean
    delete?: boolean
    connect?: LivestockWhereUniqueInput
    update?: XOR<LivestockUpdateWithoutImagesInput, LivestockUncheckedUpdateWithoutImagesInput>
  }

  export type UserCreateNestedOneWithoutReviewInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    connect?: UserWhereUniqueInput
  }

  export type ShopCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ShopCreateWithoutReviewsInput, ShopUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ShopCreateOrConnectWithoutReviewsInput
    connect?: ShopWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    upsert?: UserUpsertWithoutReviewInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
  }

  export type ShopUpdateOneRequiredWithoutReviewsInput = {
    create?: XOR<ShopCreateWithoutReviewsInput, ShopUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ShopCreateOrConnectWithoutReviewsInput
    upsert?: ShopUpsertWithoutReviewsInput
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutReviewsInput, ShopUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutShopLikesInput = {
    create?: XOR<UserCreateWithoutShopLikesInput, UserUncheckedCreateWithoutShopLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ShopCreateNestedOneWithoutShopLikesInput = {
    create?: XOR<ShopCreateWithoutShopLikesInput, ShopUncheckedCreateWithoutShopLikesInput>
    connectOrCreate?: ShopCreateOrConnectWithoutShopLikesInput
    connect?: ShopWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShopLikesInput = {
    create?: XOR<UserCreateWithoutShopLikesInput, UserUncheckedCreateWithoutShopLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopLikesInput
    upsert?: UserUpsertWithoutShopLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShopLikesInput, UserUncheckedUpdateWithoutShopLikesInput>
  }

  export type ShopUpdateOneRequiredWithoutShopLikesInput = {
    create?: XOR<ShopCreateWithoutShopLikesInput, ShopUncheckedCreateWithoutShopLikesInput>
    connectOrCreate?: ShopCreateOrConnectWithoutShopLikesInput
    upsert?: ShopUpsertWithoutShopLikesInput
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutShopLikesInput, ShopUncheckedUpdateWithoutShopLikesInput>
  }

  export type UserCreateNestedOneWithoutShopInput = {
    create?: XOR<UserCreateWithoutShopInput, UserUncheckedCreateWithoutShopInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopInput
    connect?: UserWhereUniqueInput
  }

  export type LivestockCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<LivestockCreateWithoutShopInput>, Enumerable<LivestockUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<LivestockCreateOrConnectWithoutShopInput>
    createMany?: LivestockCreateManyShopInputEnvelope
    connect?: Enumerable<LivestockWhereUniqueInput>
  }

  export type AddressCreateNestedOneWithoutShopInput = {
    create?: XOR<AddressCreateWithoutShopInput, AddressUncheckedCreateWithoutShopInput>
    connectOrCreate?: AddressCreateOrConnectWithoutShopInput
    connect?: AddressWhereUniqueInput
  }

  export type ShopReviewCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutShopInput>, Enumerable<ShopReviewUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutShopInput>
    createMany?: ShopReviewCreateManyShopInputEnvelope
    connect?: Enumerable<ShopReviewWhereUniqueInput>
  }

  export type ShopLikeCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutShopInput>, Enumerable<ShopLikeUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutShopInput>
    createMany?: ShopLikeCreateManyShopInputEnvelope
    connect?: Enumerable<ShopLikeWhereUniqueInput>
  }

  export type LivestockUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<LivestockCreateWithoutShopInput>, Enumerable<LivestockUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<LivestockCreateOrConnectWithoutShopInput>
    createMany?: LivestockCreateManyShopInputEnvelope
    connect?: Enumerable<LivestockWhereUniqueInput>
  }

  export type ShopReviewUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutShopInput>, Enumerable<ShopReviewUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutShopInput>
    createMany?: ShopReviewCreateManyShopInputEnvelope
    connect?: Enumerable<ShopReviewWhereUniqueInput>
  }

  export type ShopLikeUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutShopInput>, Enumerable<ShopLikeUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutShopInput>
    createMany?: ShopLikeCreateManyShopInputEnvelope
    connect?: Enumerable<ShopLikeWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutShopInput = {
    create?: XOR<UserCreateWithoutShopInput, UserUncheckedCreateWithoutShopInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopInput
    upsert?: UserUpsertWithoutShopInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShopInput, UserUncheckedUpdateWithoutShopInput>
  }

  export type LivestockUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<LivestockCreateWithoutShopInput>, Enumerable<LivestockUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<LivestockCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<LivestockUpsertWithWhereUniqueWithoutShopInput>
    createMany?: LivestockCreateManyShopInputEnvelope
    set?: Enumerable<LivestockWhereUniqueInput>
    disconnect?: Enumerable<LivestockWhereUniqueInput>
    delete?: Enumerable<LivestockWhereUniqueInput>
    connect?: Enumerable<LivestockWhereUniqueInput>
    update?: Enumerable<LivestockUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<LivestockUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<LivestockScalarWhereInput>
  }

  export type AddressUpdateOneWithoutShopInput = {
    create?: XOR<AddressCreateWithoutShopInput, AddressUncheckedCreateWithoutShopInput>
    connectOrCreate?: AddressCreateOrConnectWithoutShopInput
    upsert?: AddressUpsertWithoutShopInput
    disconnect?: boolean
    delete?: boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutShopInput, AddressUncheckedUpdateWithoutShopInput>
  }

  export type ShopReviewUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutShopInput>, Enumerable<ShopReviewUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<ShopReviewUpsertWithWhereUniqueWithoutShopInput>
    createMany?: ShopReviewCreateManyShopInputEnvelope
    set?: Enumerable<ShopReviewWhereUniqueInput>
    disconnect?: Enumerable<ShopReviewWhereUniqueInput>
    delete?: Enumerable<ShopReviewWhereUniqueInput>
    connect?: Enumerable<ShopReviewWhereUniqueInput>
    update?: Enumerable<ShopReviewUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<ShopReviewUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<ShopReviewScalarWhereInput>
  }

  export type ShopLikeUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutShopInput>, Enumerable<ShopLikeUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<ShopLikeUpsertWithWhereUniqueWithoutShopInput>
    createMany?: ShopLikeCreateManyShopInputEnvelope
    set?: Enumerable<ShopLikeWhereUniqueInput>
    disconnect?: Enumerable<ShopLikeWhereUniqueInput>
    delete?: Enumerable<ShopLikeWhereUniqueInput>
    connect?: Enumerable<ShopLikeWhereUniqueInput>
    update?: Enumerable<ShopLikeUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<ShopLikeUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<ShopLikeScalarWhereInput>
  }

  export type LivestockUncheckedUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<LivestockCreateWithoutShopInput>, Enumerable<LivestockUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<LivestockCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<LivestockUpsertWithWhereUniqueWithoutShopInput>
    createMany?: LivestockCreateManyShopInputEnvelope
    set?: Enumerable<LivestockWhereUniqueInput>
    disconnect?: Enumerable<LivestockWhereUniqueInput>
    delete?: Enumerable<LivestockWhereUniqueInput>
    connect?: Enumerable<LivestockWhereUniqueInput>
    update?: Enumerable<LivestockUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<LivestockUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<LivestockScalarWhereInput>
  }

  export type ShopReviewUncheckedUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopReviewCreateWithoutShopInput>, Enumerable<ShopReviewUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopReviewCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<ShopReviewUpsertWithWhereUniqueWithoutShopInput>
    createMany?: ShopReviewCreateManyShopInputEnvelope
    set?: Enumerable<ShopReviewWhereUniqueInput>
    disconnect?: Enumerable<ShopReviewWhereUniqueInput>
    delete?: Enumerable<ShopReviewWhereUniqueInput>
    connect?: Enumerable<ShopReviewWhereUniqueInput>
    update?: Enumerable<ShopReviewUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<ShopReviewUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<ShopReviewScalarWhereInput>
  }

  export type ShopLikeUncheckedUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<ShopLikeCreateWithoutShopInput>, Enumerable<ShopLikeUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ShopLikeCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<ShopLikeUpsertWithWhereUniqueWithoutShopInput>
    createMany?: ShopLikeCreateManyShopInputEnvelope
    set?: Enumerable<ShopLikeWhereUniqueInput>
    disconnect?: Enumerable<ShopLikeWhereUniqueInput>
    delete?: Enumerable<ShopLikeWhereUniqueInput>
    connect?: Enumerable<ShopLikeWhereUniqueInput>
    update?: Enumerable<ShopLikeUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<ShopLikeUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<ShopLikeScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type AddressCreateWithoutOwnerInput = {
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopCreateNestedOneWithoutLocationsAtInput
  }

  export type AddressUncheckedCreateWithoutOwnerInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopUncheckedCreateNestedOneWithoutLocationsAtInput
  }

  export type AddressCreateOrConnectWithoutOwnerInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutOwnerInput, AddressUncheckedCreateWithoutOwnerInput>
  }

  export type ShopCreateWithoutOwnerInput = {
    name: string
    rating?: number
    livestockForSale?: LivestockCreateNestedManyWithoutShopInput
    locationsAt?: AddressCreateNestedOneWithoutShopInput
    reviews?: ShopReviewCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    rating?: number
    livestockForSale?: LivestockUncheckedCreateNestedManyWithoutShopInput
    addressId: number
    reviews?: ShopReviewUncheckedCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutOwnerInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
  }

  export type ShopReviewCreateWithoutReviewerInput = {
    text: string
    rating: number
    shop: ShopCreateNestedOneWithoutReviewsInput
  }

  export type ShopReviewUncheckedCreateWithoutReviewerInput = {
    text: string
    rating: number
    shopId: number
  }

  export type ShopReviewCreateOrConnectWithoutReviewerInput = {
    where: ShopReviewWhereUniqueInput
    create: XOR<ShopReviewCreateWithoutReviewerInput, ShopReviewUncheckedCreateWithoutReviewerInput>
  }

  export type ShopReviewCreateManyReviewerInputEnvelope = {
    data: Enumerable<ShopReviewCreateManyReviewerInput>
    skipDuplicates?: boolean
  }

  export type ShopLikeCreateWithoutLikerInput = {
    shop: ShopCreateNestedOneWithoutShopLikesInput
  }

  export type ShopLikeUncheckedCreateWithoutLikerInput = {
    shopId: number
  }

  export type ShopLikeCreateOrConnectWithoutLikerInput = {
    where: ShopLikeWhereUniqueInput
    create: XOR<ShopLikeCreateWithoutLikerInput, ShopLikeUncheckedCreateWithoutLikerInput>
  }

  export type ShopLikeCreateManyLikerInputEnvelope = {
    data: Enumerable<ShopLikeCreateManyLikerInput>
    skipDuplicates?: boolean
  }

  export type LivestockWishlistCreateWithoutOwnerInput = {
    livestock: LivestockCreateNestedOneWithoutLivestockWishlistInput
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistUncheckedCreateWithoutOwnerInput = {
    livestockId: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistCreateOrConnectWithoutOwnerInput = {
    where: LivestockWishlistWhereUniqueInput
    create: XOR<LivestockWishlistCreateWithoutOwnerInput, LivestockWishlistUncheckedCreateWithoutOwnerInput>
  }

  export type LivestockWishlistCreateManyOwnerInputEnvelope = {
    data: Enumerable<LivestockWishlistCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutOwnerInput = {
    update: XOR<AddressUpdateWithoutOwnerInput, AddressUncheckedUpdateWithoutOwnerInput>
    create: XOR<AddressCreateWithoutOwnerInput, AddressUncheckedCreateWithoutOwnerInput>
  }

  export type AddressUpdateWithoutOwnerInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUpdateOneWithoutLocationsAtInput
  }

  export type AddressUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUncheckedUpdateOneWithoutLocationsAtInput
  }

  export type ShopUpsertWithoutOwnerInput = {
    update: XOR<ShopUpdateWithoutOwnerInput, ShopUncheckedUpdateWithoutOwnerInput>
    create: XOR<ShopCreateWithoutOwnerInput, ShopUncheckedCreateWithoutOwnerInput>
  }

  export type ShopUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUpdateManyWithoutShopInput
    locationsAt?: AddressUpdateOneWithoutShopInput
    reviews?: ShopReviewUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUpdateManyWithoutShopInput
  }

  export type ShopUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUncheckedUpdateManyWithoutShopInput
    addressId?: IntFieldUpdateOperationsInput | number
    reviews?: ShopReviewUncheckedUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutShopInput
  }

  export type ShopReviewUpsertWithWhereUniqueWithoutReviewerInput = {
    where: ShopReviewWhereUniqueInput
    update: XOR<ShopReviewUpdateWithoutReviewerInput, ShopReviewUncheckedUpdateWithoutReviewerInput>
    create: XOR<ShopReviewCreateWithoutReviewerInput, ShopReviewUncheckedCreateWithoutReviewerInput>
  }

  export type ShopReviewUpdateWithWhereUniqueWithoutReviewerInput = {
    where: ShopReviewWhereUniqueInput
    data: XOR<ShopReviewUpdateWithoutReviewerInput, ShopReviewUncheckedUpdateWithoutReviewerInput>
  }

  export type ShopReviewUpdateManyWithWhereWithoutReviewerInput = {
    where: ShopReviewScalarWhereInput
    data: XOR<ShopReviewUpdateManyMutationInput, ShopReviewUncheckedUpdateManyWithoutReviewInput>
  }

  export type ShopReviewScalarWhereInput = {
    AND?: Enumerable<ShopReviewScalarWhereInput>
    OR?: Enumerable<ShopReviewScalarWhereInput>
    NOT?: Enumerable<ShopReviewScalarWhereInput>
    text?: StringFilter | string
    rating?: FloatFilter | number
    shopId?: IntFilter | number
    userId?: StringFilter | string
  }

  export type ShopLikeUpsertWithWhereUniqueWithoutLikerInput = {
    where: ShopLikeWhereUniqueInput
    update: XOR<ShopLikeUpdateWithoutLikerInput, ShopLikeUncheckedUpdateWithoutLikerInput>
    create: XOR<ShopLikeCreateWithoutLikerInput, ShopLikeUncheckedCreateWithoutLikerInput>
  }

  export type ShopLikeUpdateWithWhereUniqueWithoutLikerInput = {
    where: ShopLikeWhereUniqueInput
    data: XOR<ShopLikeUpdateWithoutLikerInput, ShopLikeUncheckedUpdateWithoutLikerInput>
  }

  export type ShopLikeUpdateManyWithWhereWithoutLikerInput = {
    where: ShopLikeScalarWhereInput
    data: XOR<ShopLikeUpdateManyMutationInput, ShopLikeUncheckedUpdateManyWithoutShopLikesInput>
  }

  export type ShopLikeScalarWhereInput = {
    AND?: Enumerable<ShopLikeScalarWhereInput>
    OR?: Enumerable<ShopLikeScalarWhereInput>
    NOT?: Enumerable<ShopLikeScalarWhereInput>
    userId?: StringFilter | string
    shopId?: IntFilter | number
  }

  export type LivestockWishlistUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LivestockWishlistWhereUniqueInput
    update: XOR<LivestockWishlistUpdateWithoutOwnerInput, LivestockWishlistUncheckedUpdateWithoutOwnerInput>
    create: XOR<LivestockWishlistCreateWithoutOwnerInput, LivestockWishlistUncheckedCreateWithoutOwnerInput>
  }

  export type LivestockWishlistUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LivestockWishlistWhereUniqueInput
    data: XOR<LivestockWishlistUpdateWithoutOwnerInput, LivestockWishlistUncheckedUpdateWithoutOwnerInput>
  }

  export type LivestockWishlistUpdateManyWithWhereWithoutOwnerInput = {
    where: LivestockWishlistScalarWhereInput
    data: XOR<LivestockWishlistUpdateManyMutationInput, LivestockWishlistUncheckedUpdateManyWithoutWishlistInput>
  }

  export type LivestockWishlistScalarWhereInput = {
    AND?: Enumerable<LivestockWishlistScalarWhereInput>
    OR?: Enumerable<LivestockWishlistScalarWhereInput>
    NOT?: Enumerable<LivestockWishlistScalarWhereInput>
    userId?: StringFilter | string
    livestockId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ImageCreateWithoutLivestockInput = {
    url: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ImageUncheckedCreateWithoutLivestockInput = {
    id?: number
    url: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ImageCreateOrConnectWithoutLivestockInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutLivestockInput, ImageUncheckedCreateWithoutLivestockInput>
  }

  export type ImageCreateManyLivestockInputEnvelope = {
    data: Enumerable<ImageCreateManyLivestockInput>
    skipDuplicates?: boolean
  }

  export type ShopCreateWithoutLivestockForSaleInput = {
    owner: UserCreateNestedOneWithoutShopInput
    name: string
    rating?: number
    locationsAt?: AddressCreateNestedOneWithoutShopInput
    reviews?: ShopReviewCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutLivestockForSaleInput = {
    id?: number
    userId: string
    name: string
    rating?: number
    addressId: number
    reviews?: ShopReviewUncheckedCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutLivestockForSaleInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutLivestockForSaleInput, ShopUncheckedCreateWithoutLivestockForSaleInput>
  }

  export type LivestockWishlistCreateWithoutLivestockInput = {
    owner: UserCreateNestedOneWithoutWishlistInput
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistUncheckedCreateWithoutLivestockInput = {
    userId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistCreateOrConnectWithoutLivestockInput = {
    where: LivestockWishlistWhereUniqueInput
    create: XOR<LivestockWishlistCreateWithoutLivestockInput, LivestockWishlistUncheckedCreateWithoutLivestockInput>
  }

  export type LivestockWishlistCreateManyLivestockInputEnvelope = {
    data: Enumerable<LivestockWishlistCreateManyLivestockInput>
    skipDuplicates?: boolean
  }

  export type ImageUpsertWithWhereUniqueWithoutLivestockInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutLivestockInput, ImageUncheckedUpdateWithoutLivestockInput>
    create: XOR<ImageCreateWithoutLivestockInput, ImageUncheckedCreateWithoutLivestockInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutLivestockInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutLivestockInput, ImageUncheckedUpdateWithoutLivestockInput>
  }

  export type ImageUpdateManyWithWhereWithoutLivestockInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutImagesInput>
  }

  export type ImageScalarWhereInput = {
    AND?: Enumerable<ImageScalarWhereInput>
    OR?: Enumerable<ImageScalarWhereInput>
    NOT?: Enumerable<ImageScalarWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    livestockId?: IntNullableFilter | number | null
  }

  export type ShopUpsertWithoutLivestockForSaleInput = {
    update: XOR<ShopUpdateWithoutLivestockForSaleInput, ShopUncheckedUpdateWithoutLivestockForSaleInput>
    create: XOR<ShopCreateWithoutLivestockForSaleInput, ShopUncheckedCreateWithoutLivestockForSaleInput>
  }

  export type ShopUpdateWithoutLivestockForSaleInput = {
    owner?: UserUpdateOneRequiredWithoutShopInput
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    locationsAt?: AddressUpdateOneWithoutShopInput
    reviews?: ShopReviewUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUpdateManyWithoutShopInput
  }

  export type ShopUncheckedUpdateWithoutLivestockForSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    reviews?: ShopReviewUncheckedUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutShopInput
  }

  export type LivestockWishlistUpsertWithWhereUniqueWithoutLivestockInput = {
    where: LivestockWishlistWhereUniqueInput
    update: XOR<LivestockWishlistUpdateWithoutLivestockInput, LivestockWishlistUncheckedUpdateWithoutLivestockInput>
    create: XOR<LivestockWishlistCreateWithoutLivestockInput, LivestockWishlistUncheckedCreateWithoutLivestockInput>
  }

  export type LivestockWishlistUpdateWithWhereUniqueWithoutLivestockInput = {
    where: LivestockWishlistWhereUniqueInput
    data: XOR<LivestockWishlistUpdateWithoutLivestockInput, LivestockWishlistUncheckedUpdateWithoutLivestockInput>
  }

  export type LivestockWishlistUpdateManyWithWhereWithoutLivestockInput = {
    where: LivestockWishlistScalarWhereInput
    data: XOR<LivestockWishlistUpdateManyMutationInput, LivestockWishlistUncheckedUpdateManyWithoutLivestockWishlistInput>
  }

  export type UserCreateWithoutWishlistInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopCreateNestedOneWithoutOwnerInput
    review?: ShopReviewCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutWishlistInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressUncheckedCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopUncheckedCreateNestedOneWithoutOwnerInput
    review?: ShopReviewUncheckedCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutWishlistInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWishlistInput, UserUncheckedCreateWithoutWishlistInput>
  }

  export type LivestockCreateWithoutLivestockWishlistInput = {
    name: string
    images?: ImageCreateNestedManyWithoutLivestockInput
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopCreateNestedOneWithoutLivestockForSaleInput
  }

  export type LivestockUncheckedCreateWithoutLivestockWishlistInput = {
    id?: number
    name: string
    images?: ImageUncheckedCreateNestedManyWithoutLivestockInput
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shopId?: number | null
  }

  export type LivestockCreateOrConnectWithoutLivestockWishlistInput = {
    where: LivestockWhereUniqueInput
    create: XOR<LivestockCreateWithoutLivestockWishlistInput, LivestockUncheckedCreateWithoutLivestockWishlistInput>
  }

  export type UserUpsertWithoutWishlistInput = {
    update: XOR<UserUpdateWithoutWishlistInput, UserUncheckedUpdateWithoutWishlistInput>
    create: XOR<UserCreateWithoutWishlistInput, UserUncheckedCreateWithoutWishlistInput>
  }

  export type UserUpdateWithoutWishlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUpdateOneWithoutOwnerInput
    review?: ShopReviewUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUpdateManyWithoutLikerInput
  }

  export type UserUncheckedUpdateWithoutWishlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUncheckedUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUncheckedUpdateOneWithoutOwnerInput
    review?: ShopReviewUncheckedUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutLikerInput
  }

  export type LivestockUpsertWithoutLivestockWishlistInput = {
    update: XOR<LivestockUpdateWithoutLivestockWishlistInput, LivestockUncheckedUpdateWithoutLivestockWishlistInput>
    create: XOR<LivestockCreateWithoutLivestockWishlistInput, LivestockUncheckedCreateWithoutLivestockWishlistInput>
  }

  export type LivestockUpdateWithoutLivestockWishlistInput = {
    name?: StringFieldUpdateOperationsInput | string
    images?: ImageUpdateManyWithoutLivestockInput
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUpdateOneWithoutLivestockForSaleInput
  }

  export type LivestockUncheckedUpdateWithoutLivestockWishlistInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    images?: ImageUncheckedUpdateManyWithoutLivestockInput
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateWithoutAddressInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopCreateNestedOneWithoutOwnerInput
    review?: ShopReviewCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopUncheckedCreateNestedOneWithoutOwnerInput
    review?: ShopReviewUncheckedCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type ShopCreateWithoutLocationsAtInput = {
    owner: UserCreateNestedOneWithoutShopInput
    name: string
    rating?: number
    livestockForSale?: LivestockCreateNestedManyWithoutShopInput
    reviews?: ShopReviewCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutLocationsAtInput = {
    id?: number
    userId: string
    name: string
    rating?: number
    livestockForSale?: LivestockUncheckedCreateNestedManyWithoutShopInput
    reviews?: ShopReviewUncheckedCreateNestedManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutLocationsAtInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutLocationsAtInput, ShopUncheckedCreateWithoutLocationsAtInput>
  }

  export type UserUpsertWithoutAddressInput = {
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUpdateOneWithoutOwnerInput
    review?: ShopReviewUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUpdateManyWithoutOwnerInput
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUncheckedUpdateOneWithoutOwnerInput
    review?: ShopReviewUncheckedUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedUpdateManyWithoutOwnerInput
  }

  export type ShopUpsertWithoutLocationsAtInput = {
    update: XOR<ShopUpdateWithoutLocationsAtInput, ShopUncheckedUpdateWithoutLocationsAtInput>
    create: XOR<ShopCreateWithoutLocationsAtInput, ShopUncheckedCreateWithoutLocationsAtInput>
  }

  export type ShopUpdateWithoutLocationsAtInput = {
    owner?: UserUpdateOneRequiredWithoutShopInput
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUpdateManyWithoutShopInput
    reviews?: ShopReviewUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUpdateManyWithoutShopInput
  }

  export type ShopUncheckedUpdateWithoutLocationsAtInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUncheckedUpdateManyWithoutShopInput
    reviews?: ShopReviewUncheckedUpdateManyWithoutShopInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutShopInput
  }

  export type LivestockCreateWithoutImagesInput = {
    name: string
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shop?: ShopCreateNestedOneWithoutLivestockForSaleInput
    LivestockWishlist?: LivestockWishlistCreateNestedManyWithoutLivestockInput
  }

  export type LivestockUncheckedCreateWithoutImagesInput = {
    id?: number
    name: string
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    shopId?: number | null
    LivestockWishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutLivestockInput
  }

  export type LivestockCreateOrConnectWithoutImagesInput = {
    where: LivestockWhereUniqueInput
    create: XOR<LivestockCreateWithoutImagesInput, LivestockUncheckedCreateWithoutImagesInput>
  }

  export type LivestockUpsertWithoutImagesInput = {
    update: XOR<LivestockUpdateWithoutImagesInput, LivestockUncheckedUpdateWithoutImagesInput>
    create: XOR<LivestockCreateWithoutImagesInput, LivestockUncheckedCreateWithoutImagesInput>
  }

  export type LivestockUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: ShopUpdateOneWithoutLivestockForSaleInput
    LivestockWishlist?: LivestockWishlistUpdateManyWithoutLivestockInput
  }

  export type LivestockUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopId?: NullableIntFieldUpdateOperationsInput | number | null
    LivestockWishlist?: LivestockWishlistUncheckedUpdateManyWithoutLivestockInput
  }

  export type UserCreateWithoutReviewInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopCreateNestedOneWithoutOwnerInput
    shopLikes?: ShopLikeCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutReviewInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressUncheckedCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopUncheckedCreateNestedOneWithoutOwnerInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutReviewInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
  }

  export type ShopCreateWithoutReviewsInput = {
    owner: UserCreateNestedOneWithoutShopInput
    name: string
    rating?: number
    livestockForSale?: LivestockCreateNestedManyWithoutShopInput
    locationsAt?: AddressCreateNestedOneWithoutShopInput
    shopLikes?: ShopLikeCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutReviewsInput = {
    id?: number
    userId: string
    name: string
    rating?: number
    livestockForSale?: LivestockUncheckedCreateNestedManyWithoutShopInput
    addressId: number
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutReviewsInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutReviewsInput, ShopUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewInput = {
    update: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
  }

  export type UserUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUpdateOneWithoutOwnerInput
    shopLikes?: ShopLikeUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUpdateManyWithoutOwnerInput
  }

  export type UserUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUncheckedUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUncheckedUpdateOneWithoutOwnerInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedUpdateManyWithoutOwnerInput
  }

  export type ShopUpsertWithoutReviewsInput = {
    update: XOR<ShopUpdateWithoutReviewsInput, ShopUncheckedUpdateWithoutReviewsInput>
    create: XOR<ShopCreateWithoutReviewsInput, ShopUncheckedCreateWithoutReviewsInput>
  }

  export type ShopUpdateWithoutReviewsInput = {
    owner?: UserUpdateOneRequiredWithoutShopInput
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUpdateManyWithoutShopInput
    locationsAt?: AddressUpdateOneWithoutShopInput
    shopLikes?: ShopLikeUpdateManyWithoutShopInput
  }

  export type ShopUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUncheckedUpdateManyWithoutShopInput
    addressId?: IntFieldUpdateOperationsInput | number
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutShopInput
  }

  export type UserCreateWithoutShopLikesInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopCreateNestedOneWithoutOwnerInput
    review?: ShopReviewCreateNestedManyWithoutReviewerInput
    wishlist?: LivestockWishlistCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutShopLikesInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressUncheckedCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    shop?: ShopUncheckedCreateNestedOneWithoutOwnerInput
    review?: ShopReviewUncheckedCreateNestedManyWithoutReviewerInput
    wishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutShopLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShopLikesInput, UserUncheckedCreateWithoutShopLikesInput>
  }

  export type ShopCreateWithoutShopLikesInput = {
    owner: UserCreateNestedOneWithoutShopInput
    name: string
    rating?: number
    livestockForSale?: LivestockCreateNestedManyWithoutShopInput
    locationsAt?: AddressCreateNestedOneWithoutShopInput
    reviews?: ShopReviewCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutShopLikesInput = {
    id?: number
    userId: string
    name: string
    rating?: number
    livestockForSale?: LivestockUncheckedCreateNestedManyWithoutShopInput
    addressId: number
    reviews?: ShopReviewUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutShopLikesInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutShopLikesInput, ShopUncheckedCreateWithoutShopLikesInput>
  }

  export type UserUpsertWithoutShopLikesInput = {
    update: XOR<UserUpdateWithoutShopLikesInput, UserUncheckedUpdateWithoutShopLikesInput>
    create: XOR<UserCreateWithoutShopLikesInput, UserUncheckedCreateWithoutShopLikesInput>
  }

  export type UserUpdateWithoutShopLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUpdateOneWithoutOwnerInput
    review?: ShopReviewUpdateManyWithoutReviewerInput
    wishlist?: LivestockWishlistUpdateManyWithoutOwnerInput
  }

  export type UserUncheckedUpdateWithoutShopLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUncheckedUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shop?: ShopUncheckedUpdateOneWithoutOwnerInput
    review?: ShopReviewUncheckedUpdateManyWithoutReviewerInput
    wishlist?: LivestockWishlistUncheckedUpdateManyWithoutOwnerInput
  }

  export type ShopUpsertWithoutShopLikesInput = {
    update: XOR<ShopUpdateWithoutShopLikesInput, ShopUncheckedUpdateWithoutShopLikesInput>
    create: XOR<ShopCreateWithoutShopLikesInput, ShopUncheckedCreateWithoutShopLikesInput>
  }

  export type ShopUpdateWithoutShopLikesInput = {
    owner?: UserUpdateOneRequiredWithoutShopInput
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUpdateManyWithoutShopInput
    locationsAt?: AddressUpdateOneWithoutShopInput
    reviews?: ShopReviewUpdateManyWithoutShopInput
  }

  export type ShopUncheckedUpdateWithoutShopLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    livestockForSale?: LivestockUncheckedUpdateManyWithoutShopInput
    addressId?: IntFieldUpdateOperationsInput | number
    reviews?: ShopReviewUncheckedUpdateManyWithoutShopInput
  }

  export type UserCreateWithoutShopInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    review?: ShopReviewCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutShopInput = {
    id: string
    email?: string | null
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    avatar?: string | null
    title?: string | null
    address?: AddressUncheckedCreateNestedOneWithoutOwnerInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    review?: ShopReviewUncheckedCreateNestedManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedCreateNestedManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutShopInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShopInput, UserUncheckedCreateWithoutShopInput>
  }

  export type LivestockCreateWithoutShopInput = {
    name: string
    images?: ImageCreateNestedManyWithoutLivestockInput
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    LivestockWishlist?: LivestockWishlistCreateNestedManyWithoutLivestockInput
  }

  export type LivestockUncheckedCreateWithoutShopInput = {
    id?: number
    name: string
    images?: ImageUncheckedCreateNestedManyWithoutLivestockInput
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
    LivestockWishlist?: LivestockWishlistUncheckedCreateNestedManyWithoutLivestockInput
  }

  export type LivestockCreateOrConnectWithoutShopInput = {
    where: LivestockWhereUniqueInput
    create: XOR<LivestockCreateWithoutShopInput, LivestockUncheckedCreateWithoutShopInput>
  }

  export type LivestockCreateManyShopInputEnvelope = {
    data: Enumerable<LivestockCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutShopInput = {
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    owner: UserCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AddressUncheckedCreateWithoutShopInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: number
    isPrimary: boolean
    userId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AddressCreateOrConnectWithoutShopInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutShopInput, AddressUncheckedCreateWithoutShopInput>
  }

  export type ShopReviewCreateWithoutShopInput = {
    text: string
    rating: number
    reviewer: UserCreateNestedOneWithoutReviewInput
  }

  export type ShopReviewUncheckedCreateWithoutShopInput = {
    text: string
    rating: number
    userId: string
  }

  export type ShopReviewCreateOrConnectWithoutShopInput = {
    where: ShopReviewWhereUniqueInput
    create: XOR<ShopReviewCreateWithoutShopInput, ShopReviewUncheckedCreateWithoutShopInput>
  }

  export type ShopReviewCreateManyShopInputEnvelope = {
    data: Enumerable<ShopReviewCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type ShopLikeCreateWithoutShopInput = {
    liker: UserCreateNestedOneWithoutShopLikesInput
  }

  export type ShopLikeUncheckedCreateWithoutShopInput = {
    userId: string
  }

  export type ShopLikeCreateOrConnectWithoutShopInput = {
    where: ShopLikeWhereUniqueInput
    create: XOR<ShopLikeCreateWithoutShopInput, ShopLikeUncheckedCreateWithoutShopInput>
  }

  export type ShopLikeCreateManyShopInputEnvelope = {
    data: Enumerable<ShopLikeCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutShopInput = {
    update: XOR<UserUpdateWithoutShopInput, UserUncheckedUpdateWithoutShopInput>
    create: XOR<UserCreateWithoutShopInput, UserUncheckedCreateWithoutShopInput>
  }

  export type UserUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    review?: ShopReviewUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUpdateManyWithoutOwnerInput
  }

  export type UserUncheckedUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    address?: AddressUncheckedUpdateOneWithoutOwnerInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    review?: ShopReviewUncheckedUpdateManyWithoutReviewerInput
    shopLikes?: ShopLikeUncheckedUpdateManyWithoutLikerInput
    wishlist?: LivestockWishlistUncheckedUpdateManyWithoutOwnerInput
  }

  export type LivestockUpsertWithWhereUniqueWithoutShopInput = {
    where: LivestockWhereUniqueInput
    update: XOR<LivestockUpdateWithoutShopInput, LivestockUncheckedUpdateWithoutShopInput>
    create: XOR<LivestockCreateWithoutShopInput, LivestockUncheckedCreateWithoutShopInput>
  }

  export type LivestockUpdateWithWhereUniqueWithoutShopInput = {
    where: LivestockWhereUniqueInput
    data: XOR<LivestockUpdateWithoutShopInput, LivestockUncheckedUpdateWithoutShopInput>
  }

  export type LivestockUpdateManyWithWhereWithoutShopInput = {
    where: LivestockScalarWhereInput
    data: XOR<LivestockUpdateManyMutationInput, LivestockUncheckedUpdateManyWithoutLivestockForSaleInput>
  }

  export type LivestockScalarWhereInput = {
    AND?: Enumerable<LivestockScalarWhereInput>
    OR?: Enumerable<LivestockScalarWhereInput>
    NOT?: Enumerable<LivestockScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: FloatFilter | number
    discountedPrice?: FloatFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    shopId?: IntNullableFilter | number | null
  }

  export type AddressUpsertWithoutShopInput = {
    update: XOR<AddressUpdateWithoutShopInput, AddressUncheckedUpdateWithoutShopInput>
    create: XOR<AddressCreateWithoutShopInput, AddressUncheckedCreateWithoutShopInput>
  }

  export type AddressUpdateWithoutShopInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: IntFieldUpdateOperationsInput | number
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopReviewUpsertWithWhereUniqueWithoutShopInput = {
    where: ShopReviewWhereUniqueInput
    update: XOR<ShopReviewUpdateWithoutShopInput, ShopReviewUncheckedUpdateWithoutShopInput>
    create: XOR<ShopReviewCreateWithoutShopInput, ShopReviewUncheckedCreateWithoutShopInput>
  }

  export type ShopReviewUpdateWithWhereUniqueWithoutShopInput = {
    where: ShopReviewWhereUniqueInput
    data: XOR<ShopReviewUpdateWithoutShopInput, ShopReviewUncheckedUpdateWithoutShopInput>
  }

  export type ShopReviewUpdateManyWithWhereWithoutShopInput = {
    where: ShopReviewScalarWhereInput
    data: XOR<ShopReviewUpdateManyMutationInput, ShopReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type ShopLikeUpsertWithWhereUniqueWithoutShopInput = {
    where: ShopLikeWhereUniqueInput
    update: XOR<ShopLikeUpdateWithoutShopInput, ShopLikeUncheckedUpdateWithoutShopInput>
    create: XOR<ShopLikeCreateWithoutShopInput, ShopLikeUncheckedCreateWithoutShopInput>
  }

  export type ShopLikeUpdateWithWhereUniqueWithoutShopInput = {
    where: ShopLikeWhereUniqueInput
    data: XOR<ShopLikeUpdateWithoutShopInput, ShopLikeUncheckedUpdateWithoutShopInput>
  }

  export type ShopLikeUpdateManyWithWhereWithoutShopInput = {
    where: ShopLikeScalarWhereInput
    data: XOR<ShopLikeUpdateManyMutationInput, ShopLikeUncheckedUpdateManyWithoutShopLikesInput>
  }

  export type ShopReviewCreateManyReviewerInput = {
    text: string
    rating: number
    shopId: number
  }

  export type ShopLikeCreateManyLikerInput = {
    shopId: number
  }

  export type LivestockWishlistCreateManyOwnerInput = {
    livestockId: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ShopReviewUpdateWithoutReviewerInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    shop?: ShopUpdateOneRequiredWithoutReviewsInput
  }

  export type ShopReviewUncheckedUpdateWithoutReviewerInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    shopId?: IntFieldUpdateOperationsInput | number
  }

  export type ShopReviewUncheckedUpdateManyWithoutReviewInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    shopId?: IntFieldUpdateOperationsInput | number
  }

  export type ShopLikeUpdateWithoutLikerInput = {
    shop?: ShopUpdateOneRequiredWithoutShopLikesInput
  }

  export type ShopLikeUncheckedUpdateWithoutLikerInput = {
    shopId?: IntFieldUpdateOperationsInput | number
  }

  export type ShopLikeUncheckedUpdateManyWithoutShopLikesInput = {
    shopId?: IntFieldUpdateOperationsInput | number
  }

  export type LivestockWishlistUpdateWithoutOwnerInput = {
    livestock?: LivestockUpdateOneRequiredWithoutLivestockWishlistInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUncheckedUpdateWithoutOwnerInput = {
    livestockId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUncheckedUpdateManyWithoutWishlistInput = {
    livestockId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateManyLivestockInput = {
    id?: number
    url: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type LivestockWishlistCreateManyLivestockInput = {
    userId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ImageUpdateWithoutLivestockInput = {
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateWithoutLivestockInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUpdateWithoutLivestockInput = {
    owner?: UserUpdateOneRequiredWithoutWishlistInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUncheckedUpdateWithoutLivestockInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockWishlistUncheckedUpdateManyWithoutLivestockWishlistInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LivestockCreateManyShopInput = {
    id?: number
    name: string
    price: number
    discountedPrice?: number
    quantity?: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ShopReviewCreateManyShopInput = {
    text: string
    rating: number
    userId: string
  }

  export type ShopLikeCreateManyShopInput = {
    userId: string
  }

  export type LivestockUpdateWithoutShopInput = {
    name?: StringFieldUpdateOperationsInput | string
    images?: ImageUpdateManyWithoutLivestockInput
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LivestockWishlist?: LivestockWishlistUpdateManyWithoutLivestockInput
  }

  export type LivestockUncheckedUpdateWithoutShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    images?: ImageUncheckedUpdateManyWithoutLivestockInput
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    LivestockWishlist?: LivestockWishlistUncheckedUpdateManyWithoutLivestockInput
  }

  export type LivestockUncheckedUpdateManyWithoutLivestockForSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discountedPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopReviewUpdateWithoutShopInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    reviewer?: UserUpdateOneRequiredWithoutReviewInput
  }

  export type ShopReviewUncheckedUpdateWithoutShopInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ShopReviewUncheckedUpdateManyWithoutReviewsInput = {
    text?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ShopLikeUpdateWithoutShopInput = {
    liker?: UserUpdateOneRequiredWithoutShopLikesInput
  }

  export type ShopLikeUncheckedUpdateWithoutShopInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}